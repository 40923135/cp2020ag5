<h1>功課繳交</h1>
<h2>H1</h2>
<p>40923135 12/11</p>
<p>40923110 12/18</p>
<p>40923111 01/07</p>
<p>40923122 01/08</p>
<p>40923105 01/08</p>
<h2>H3</h2>
<p>40923135 01/04</p>
<p>40923111 01/07</p>
<h2>H3 (ALL EXERCISES)</h2>
<h3>p1</h3>
<p>chapter input</p>
<div><i>input strings types int</i></div>
<p>Calibrating the exercises to the audience is going to be a challenging task, so I ask you to bear with me if the exercises are too easy or too hard. Every week there will be a poll you can click on to discuss whether the exercise is too easy or too hard and hopefully in a few weeks, I’ll get the level right. Let’s get to it! I will start with the exercise and include a discussion later, in case you want the extra challenge.</p>
<p>Exercise1(Solution)</p>
<p>Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.</p>
<p>Extras:</p>
<ol>
<li>Add on to the previous program by asking the user for another number and printing out that many copies of the previous message. (<em>Hint:<span> </span><a href="http://www.mathsisfun.com/operation-order-pemdas.html">order of operations</a><span> </span>exists in Python</em>)</li>
<li>Print out that many copies of the previous message on separate lines. (<em>Hint: the string<span> </span><code class="highlighter-rouge">"\n</code><span> </span>is the same as pressing the ENTER button</em>)</li>
</ol>
<p>Discosion</p>
<p>Concepts for this week:</p>
<ul>
<li>Getting user input</li>
<li>Manipulating strings (a few ways)</li>
</ul>
<p>user input in python</p>
<p>To get user input in Python (3), the command you use is<span> </span><a href="http://docs.python.org/3.3/library/functions.html?highlight=input#input"><code class="highlighter-rouge">input()</code></a>. Store the result in a variable, and use it to your heart’s content. Remember that the result you get from the user will be a string, even if they enter a number.</p>
<p>For example,</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Give me your name: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Your name is "</span> <span class="o">+</span> <span class="n">name</span><span class="p">)</span></code></pre>
</figure>
<p>What this will print in the terminal (or the shell, whatever you are running Python in) will be:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">your</span> <span class="n">name</span><span class="p">:</span> <span class="n">Michele</span>
<span class="n">Your</span> <span class="n">name</span> <span class="ow">is</span> <span class="n">Michele</span></code></pre>
</figure>
<p>What happens at the end of<span> </span><code class="highlighter-rouge">input()</code><span> </span>is that it waits for the user to type something and press ENTER. Only after the user presses ENTER does the program continue.</p>
<p>What you get from the<span> </span><code class="highlighter-rouge">input()</code><span> </span>function is a string. What can you do with it?</p>
<p>First: Make the string into a number. Let’s say you are 100% positive that the user entered a number. You can turn the string into an integer with the function<span> </span><a href="http://docs.python.org/3.3/library/functions.html#int"><code class="highlighter-rouge">int()</code></a>. (In a later exercise or two or three there will be questions about what to do when the user does NOT enter a number and you try to do this; for now don’t worry about that problem). Here is what this looks like:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your age: "</span><span class="p">)</span>
<span class="n">age</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">age</span><span class="p">)</span></code></pre>
</figure>
<p>(or, if you want to be more compact with your code)</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter your age: "</span><span class="p">))</span>
	</code></pre>
</figure>
<p>In both cases,<span> </span><code class="highlighter-rouge">age</code><span> </span>will hold a variable that is an integer, and now you can do math with it.</p>
<p>(Note, you can also turn integers into strings exactly in the opposite way, using the<span> </span><a href="http://docs.python.org/3.3/library/functions.html#str"><code class="highlighter-rouge">str()</code></a><span> </span>function)</p>
<p>Second: Do math with strings. What do I mean by that? I mean, if I want to combine (concatenate<span> </span>is the computer science word for this) strings, all I need to do is add them:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	
<span class="k">print</span><span class="p">(</span><span class="s">"Were"</span> <span class="o">+</span> <span class="s">"wolf"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Door"</span> <span class="o">+</span> <span class="s">"man"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"4"</span> <span class="o">+</span> <span class="s">"chan"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="s">"chan"</span><span class="p">)</span></code></pre>
</figure>
<p>The same works for multiplication:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="s">"test"</span><span class="p">)</span></code></pre>
</figure>
<p>but division and subtraction do not work like this. In terms of multiplication, the idea of multiplyling two strings together is not well-defined. What does it mean to multiply two strings in the first place? However, it makes sense in a way to specify multiplying a string by a number - just repeat that string that number of times. Try this in your own program with all the arithmetic operations with numbers and strings - the best way to get a feel for what works and what doesn’t is to try it!</p>
<p>Happy coding</p>
<p>Forgot how to<span> </span><a href="https://www.practicepython.org/about/">submit exercises</a>?</p>
<p><strong>字符輸入</strong></p>
<div><i><span><span>輸入字符串類型int</span></span></i></div>
<p><span><span>向觀眾校準練習將是一項艱鉅的任務，因此，我請您忍受練習是否太容易或太難。</span><span>每週都會有一個民意測驗，您可以單擊以討論該練習是太容易還是太難了，希望在幾週後，我會把水平調到正確的水平。</span><span>讓我們開始吧！</span><span>如果您需要額外的挑戰，我將從練習開始，並在以後進行討論。</span></span></p>
<p><span><span>練習1和解決方案</span></span></p>
<p><span><span>創建一個程序，要求用戶輸入他們的姓名和年齡。</span><span>打印給他們的消息，告訴他們他們將滿100歲的年份。</span></span></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>通過詢問用戶另一個號碼並打印出先前消息的許多副本來添加到先前的程序中。</span><span>（</span></span><em><span><span>提示：</span></span><a href="http://www.mathsisfun.com/operation-order-pemdas.html"><span><span>操作順序</span></span></a><span><span>在Python中存在</span></span></em><span><span>）</span></span></li>
<li><span><span>在單獨的行上打印出先前消息的許多副本。</span><span>（</span></span><em><span><span>提示：字符串</span></span><code class="highlighter-rouge">"\n</code><span><span>與按ENTER按鈕相同</span></span></em><span><span>）</span></span><span><span></span></span></li>
</ol>
<p><span><span>討論區</span></span></p>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>獲取用戶輸入</span></span></li>
<li><span><span>處理字符串（幾種方法）</span></span></li>
</ul>
<p><strong>使用python輸入</strong></p>
<p><span><span>要在Python（3）中獲得用戶輸入，您使用的命令是</span></span><a href="http://docs.python.org/3.3/library/functions.html?highlight=input#input"><code class="highlighter-rouge">input()</code></a><span><span>。</span><span>將結果存儲在變量中，並將其用於您的內心。</span><span>請記住，即使用戶輸入數字，您從用戶那裡得到的結果也將是字符串。</span></span></p>
<p><span><span>例如，</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Give me your name: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Your name is "</span> <span class="o">+</span> <span class="n">name</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>這將在終端（或外殼，無論您在其中運行Python的是什麼）中顯示的內容是：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">Give</span> <span class="n">me</span> <span class="n">your</span> <span class="n">name</span><span class="p">:</span> <span class="n">Michele</span>
<span class="n">Your</span> <span class="n">name</span> <span class="ow">is</span> <span class="n">Michele</span></code></pre>
</figure>
<p><span><span>最後發生的事情</span></span><code class="highlighter-rouge">input()</code><span><span>是，它等待用戶鍵入內容並按Enter。</span><span>僅在用戶按下ENTER之後，程序才會繼續。</span></span></p>
<p><strong>處理字符串</strong></p>
<p><span><span>從</span></span><code class="highlighter-rouge">input()</code><span><span>函數中</span><span>得到的</span><span>是一個字符串。</span><span>你能做什麼呢？</span></span></p>
<p><span><span>第一：將字符串變成數字。</span><span>假設您100％肯定用戶輸入了數字。</span><span>您可以使用函數將字符串轉換為整數</span></span><a href="http://docs.python.org/3.3/library/functions.html#int"><code class="highlighter-rouge">int()</code></a><span><span>。</span><span>（在以後的一兩三個練習中，當用戶不輸入數字而您嘗試這樣做時，將會出現有關如何處理的問題；現在不必擔心該問題）。</span><span>看起來像這樣：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your age: "</span><span class="p">)</span>
<span class="n">age</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">age</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>（或者，如果您想使代碼更緊湊）</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">age</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Enter your age: "</span><span class="p">))</span>
	</code></pre>
</figure>
<p><span><span>在這兩種情況下，</span></span><code class="highlighter-rouge">age</code><span><span>都將包含一個整數變量，現在您可以使用它進行數學運算。</span></span></p>
<p><span><span>（注意，您也可以使用</span></span><a href="http://docs.python.org/3.3/library/functions.html#str"><code class="highlighter-rouge">str()</code></a><span><span>函數</span><span>以相反的方式將整數轉換為字符串</span><span>）</span></span></p>
<p><span><span>第二：對字符串進行數學運算。</span><span>那是什麼意思<span> </span></span><span>我的意思是，如果我想組合（</span></span><strong><span><span>連接</span></span></strong><span><span>起來</span><span>就是計算機科學這個詞）字符串，我要做的就是添加它們：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	
<span class="k">print</span><span class="p">(</span><span class="s">"Were"</span> <span class="o">+</span> <span class="s">"wolf"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Door"</span> <span class="o">+</span> <span class="s">"man"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"4"</span> <span class="o">+</span> <span class="s">"chan"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="s">"chan"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>乘法的工作原理相同：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="mi">4</span> <span class="o">*</span> <span class="s">"test"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>但是除法和減法不是這樣的。</span><span>就乘法而言，將兩個字符串相乘的想法尚不明確。</span><span>首先將兩個字符串相乘是什麼意思？</span><span>但是，以某種方式指定將字符串乘以數字是有意義的-只需將該字符串重複該次數即可。</span><span>在您自己的程序中嘗試使用帶有數字和字符串的所有算術運算-嘗試一下什麼有效和什麼無效的最佳方法是嘗試一下！</span></span></p>
<h3>p2</h3>
<p>ODD OR EVEN</p>
<div><i>input if types int equality comparison numbers mod</i></div>
<p>Again, the exercise comes first (with a few extras if you want the extra challenge or want to spend more time), followed by a discussion. Enjoy!</p>
<p>EXERCISE AND SOLUTIONS</p>
<p>Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.<span> </span><em>Hint: how does an even / odd number react differently when divided by 2?</em></p>
<p>Extras:</p>
<ol>
<li>If the number is a multiple of 4, print out a different message.</li>
<li>Ask the user for two numbers: one number to check (call it<span> </span><code class="highlighter-rouge">num</code>) and one number to divide by (<code class="highlighter-rouge">check</code>). If<span> </span><code class="highlighter-rouge">check</code><span> </span>divides evenly into<span> </span><code class="highlighter-rouge">num</code>, tell that to the user. If not, print a different appropriate message</li>
</ol>
<p>.DISSCUSION</p>
<p>Concepts for this week:</p>
<ul>
<li>Modular arithmetic (the modulus operator)</li>
<li>Conditionals (if statements)</li>
<li>Checking equality</li>
</ul>
<p>We have been doing arithmetic (addition, subtraction, multiplication, division) since elementary school, and often it is useful for us to find not the answer to a division problem but the remainder when we do a division operation. This operation is called the “modulus operation.” For example, when I divide 5 by 3, the remainder is 2, and the sentence reads like this: “5 modulo 3 is 2.”</p>
<p>In the Python shell:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">6</span> <span class="o">%</span> <span class="mi">3</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span> <span class="o">%</span> <span class="mi">3</span>
<span class="mi">1</span></code></pre>
</figure>
<p>The<span> </span><code class="highlighter-rouge">%</code><span> </span>sign is exactly the modulus operator.</p>
<p>CONDITIONAL</p>
<p>When a computer (or a program) needs to decide something, it checks whether some condition is satisfied, which is where the term<span> </span><strong>conditional</strong><span> </span>comes from. Conditionals are a fancy way of saying “if statements”. If Michele was born in New York, she has an American passport. That statement is a conditional (if statement) that in this case is true. In Python this works the same way:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  
<span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">17</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"can see a rated R movie"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">17</span> <span class="ow">and</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">12</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"can see a rated PG-13 movie"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"can only see rated PG movies"</span><span class="p">)</span></code></pre>
</figure>
<p>When the program gets to the<span> </span><code class="highlighter-rouge">if</code><span> </span>statement, it will check the value of the variable called<span> </span><code class="highlighter-rouge">age</code><span> </span>against all of the conditions, in order, and will print something to the screen accordingly. Note that<span> </span><code class="highlighter-rouge">elif</code><span> </span>is a portmanteau of “else” and “if”. So if the variable<span> </span><code class="highlighter-rouge">age</code><span> </span>holds the value 15, the statement<span> </span><code class="highlighter-rouge">"can see a rated PG-13 movie"</code><span> </span>will be printed to the screen.</p>
<p>Note how the statement<span> </span><code class="highlighter-rouge">elif age &lt; 17 and age &gt; 12</code><span> </span>has the statement<span> </span><code class="highlighter-rouge">and</code><span> </span>- you can use<span> </span><code class="highlighter-rouge">or</code><span> </span>and<span> </span><code class="highlighter-rouge">not</code><span> </span>in the same way. Understanding a bit about logic and how it works, or being able to rationally think about logic will help you get the conditions right - oh, and a lot of practice.</p>
<p>Links about conditionals:</p>
<ul>
<li><a href="http://docs.python.org/3.3/tutorial/controlflow.html">The official Python documentation</a></li>
<li><a href="http://www.pythonforbeginners.com/basics/python-if-elif-else-statement/">Python for beginners explains conditionals</a></li>
</ul>
<p>CHEKING OR EQUALITY</p>
<p>A fundamental thing you want to do with your program is check whether some number is equal to another. Say the user tells you how many questions they answered incorrectly on a practice exam, and depending on the number of correctly-answered questions, you can suggest a specific course of action. For integers, strings, floats, and many other variable types, this is done with a simple syntax:<span> </span><code class="highlighter-rouge">==</code>. To explicitly check inequality, use<span> </span><code class="highlighter-rouge">!=</code>.</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  
<span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable has the value 3"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable does not have the value 3"</span><span class="p">)</span></code></pre>
</figure>
<p>Notice how in this example, the condition is redundant. In the first condition we are checking whether the variable<span> </span><code class="highlighter-rouge">a</code><span> </span>has the value 3 and in the second, we are checking whether<span> </span><code class="highlighter-rouge">a</code><span> </span>does NOT have the value 3. However, if the first condition is not true (<code class="highlighter-rouge">a</code><span> </span>is in fact not 3), then the second condition is by definition true. So a more efficient way to write the above conditional is like this:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable has the value 3"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable does not have the value 3"</span><span class="p">)</span></code></pre>
</figure>
<p>The same equality / inequality comparisons work for strings.</p>
<p>Links about equality and comparators:]</p>
<p><strong>基數或偶數</strong></p>
<div><i><span><span>輸入類型是否等於相等比較數mod</span></span></i></div>
<p><span><span>再次，練習是第一位的（如果您需要額外的挑戰或想要花費更多的時間，還可以進行一些其他操作），然後進行討論。</span><span>請享用！</span></span></p>
<p><strong>練習2和解決方法</strong></p>
<p><span><span>詢問用戶一個數字。</span><span>根據數字是偶數還是奇數，向用戶打印一條適當的消息。</span></span><em><span><span>提示：偶數/奇數除以2時的反應如何？</span></span></em></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>如果數字是4的倍數，請打印出另一條消息。</span></span></li>
<li><span><span>向用戶詢問兩個數字：一個數字要檢查（稱為</span></span><code class="highlighter-rouge">num</code><span><span>），另一個數字要除以（</span></span><code class="highlighter-rouge">check</code><span><span>）。</span><span>如果</span></span><code class="highlighter-rouge">check</code><span><span>平均分為</span></span><code class="highlighter-rouge">num</code><span><span>，請告知用戶。</span><span>如果不是，請打印其他適當的消息。</span></span></li>
</ol>
<p><strong>討論區</strong></p>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>模塊化算術（模運算符）</span></span></li>
<li><span><span>有條件的（如果語句）</span></span></li>
<li><span><span>檢查平等</span></span></li>
</ul>
<p><strong>模塊換算數</strong></p>
<p><span><span>從小學開始，我們就一直在進行算術運算（加，減，乘，除），這對於我們尋找除法問題不是答案，而是對除法運算的其餘部分有用。</span><span>該操作稱為“模運算”。</span><span>例如，當我將5除以3時，餘數為2，句子的內容如下：“ 5模3為2”。</span></span></p>
<p><span><span>在Python Shell中：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="o">%</span> <span class="mi">3</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">6</span> <span class="o">%</span> <span class="mi">3</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">7</span> <span class="o">%</span> <span class="mi">3</span>
<span class="mi">1</span></code></pre>
</figure>
<p><span><span>該</span></span><code class="highlighter-rouge">%</code><span><span>標誌是完全模運算符。</span></span></p>
<p><span><span>有條件</span></span></p>
<p><span><span>當計算機（或程序）需要做出決定時，它會檢查是否滿足某些條件，這就是</span></span><strong><span><span>條件</span></span></strong><span><span>一詞的來源。</span><span>條件語句是說“ if語句”的一種奇特的方式。</span><span>如果米歇爾（Michele）出生於紐約，則她擁有美國護照。</span><span>該語句是在這種情況下為真的條件（如果語句）。</span><span>在Python中，這是相同的方式：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  
<span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">17</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"can see a rated R movie"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">17</span> <span class="ow">and</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">12</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"can see a rated PG-13 movie"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"can only see rated PG movies"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>當程序到達該</span></span><code class="highlighter-rouge">if</code><span><span>語句時，它將按</span></span><code class="highlighter-rouge">age</code><span><span>所有條件依次</span><span>檢查被調用的變量的值</span><span>，並將相應的內容打印到屏幕上。</span><span>請注意，這</span></span><code class="highlighter-rouge">elif</code><span><span>是“ else”和“ if”的組合。</span><span>因此，如果變量</span></span><code class="highlighter-rouge">age</code><span><span>保留值15，則該語句</span></span><code class="highlighter-rouge">"can see a rated PG-13 movie"</code><span><span>將被打印到屏幕上。</span></span></p>
<p><span><span>請注意該語句如何</span></span><code class="highlighter-rouge">elif age &lt; 17 and age &gt; 12</code><span><span>具有該語句</span></span><code class="highlighter-rouge">and</code><span><span>-您可以使用</span></span><code class="highlighter-rouge">or</code><span><span>和</span></span><code class="highlighter-rouge">not</code><span><span>以相同的方式。</span><span>了解一些有關邏輯及其原理的知識，或者能夠理性地思考邏輯，將幫助您找到合適的條件-哦，還有很多練習。</span></span></p>
<p><span><span>有關條件的鏈接：</span></span></p>
<ul>
<li><a href="http://docs.python.org/3.3/tutorial/controlflow.html"><span><span>官方Python文檔</span></span></a></li>
<li><span><span><a href="http://www.pythonforbeginners.com/basics/python-if-elif-else-statement/">初學者使用Python解釋條件</a></span></span></li>
</ul>
<p><strong>檢查是否相等</strong></p>
<p></p>
<p><span><span>查是否相等</span></span><span><span>您要對程序執行的基本操作是檢查某個數字是否等於另一個數字。</span><span>假設用戶告訴您在練習考試中有多少個錯誤回答的問題，並且根據正確回答的問題數，您可以提出具體的操作建議。</span><span>對於整數，字符串，浮點數和許多其他變量類型，這是通過簡單的語法完成的：</span></span><code class="highlighter-rouge">==</code><span><span>。</span><span>要顯式檢查不平等，請使用</span></span><code class="highlighter-rouge">!=</code><span><span>。</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  
<span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable has the value 3"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">a</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable does not have the value 3"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>請注意，在此示例中，條件是多餘的。</span><span>在第一個條件中，我們正在檢查變量是否</span></span><code class="highlighter-rouge">a</code><span><span>具有值3，在第二個</span><span>條件中，我們正在檢查變量</span><span>是否</span></span><code class="highlighter-rouge">a</code><span><span>不具有值3。但是，如果第一個條件不成立（</span></span><code class="highlighter-rouge">a</code><span><span>實際上不是3），則第二個條件根據定義，條件是正確的。</span><span>因此，編寫上述條件的更有效方法如下：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span> 
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable has the value 3"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"the variable does not have the value 3"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>相同的相等/不相等比較適用於字符串。</span></span></p>
<p><span><span>有關相等性和比較器的鏈接：</span></span></p>
<h3>P3</h3>
<p><span><span>LISS LES THAN TEN</span></span></p>
<div><i>list numbers elements if conditional</i></div>
<div><i></i></div>
<div><i>EXERCISE3</i></div>
<p>Take a list, say for example this one:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that prints out all the elements of the list that are less than 5.</p>
<p>Extras:</p>
<ol>
<li>Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list.</li>
<li>Write this in one line of Python.</li>
<li>Ask the user for a number and return a list that contains only elements from the original list<span> </span><code class="highlighter-rouge">a</code><span> </span>that are smaller than that number given by the user.</li>
</ol>
<p><span>DISSCUSION</span></p>
<p>This week’s topics:</p>
<ol>
<li>Lists</li>
<li>More conditionals (if statements)</li>
</ol>
<p>LISTS</p>
<p>This week’s exercise hits on a topic critical for all types and styles of programming:<span> </span><strong>lists</strong>. Lists are basically an ordered way of grouping things (called<span> </span><strong>elements</strong>) - the cool thing about lists in Python is that you can have a list that contains objects of multiple types. Your list can mix between strings, integers, objects, other lists, what have you.</p>
<p>The way to construct an empty list is just to do</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="p">[]</span></code></pre>
</figure>
<p>And your variable<span> </span><code class="highlighter-rouge">x</code><span> </span>now holds an empty list. To add things to this list, just “append” them to the list. Like so:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span></code></pre>
</figure>
<p>Your list<span> </span><code class="highlighter-rouge">x</code><span> </span>now looks like<span> </span><code class="highlighter-rouge">[3]</code>.</p>
<p>In Python, lists are also<span> </span><strong>iterables</strong>, which means you can loop through them with a<span> </span><strong>for loop</strong><span> </span>in a convenient way. (If you come from other languages like C++ or Java you are most likely used to using a counter to loop through indices of a list - in Python you can actually loop through the elements.) I will let the code speak for itself:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">"Michele"</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]]</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">)</span></code></pre>
</figure>
<p>Will yield the result:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">1 
3
"Michele"
[5, 6, 7]</code></pre>
</figure>
<p>There are many other properties of lists, but for the basic exercise all you should need is this for loop property. Future weeks will address other properties of lists.</p>
<p>For more information about lists in Python, check out these resources:</p>
<ul>
<li><a href="http://docs.python.org/3.3/tutorial/datastructures.html">The official Python documentation on lists</a></li>
<li><a href="http://www.tutorialspoint.com/python/python_lists.htm">Tutorialspoint on Python lists</a></li>
<li><a href="http://effbot.org/zone/python-list.htm">Someone else’s blog post about lists</a></li>
</ul>
<p>MORE CONDITIONAL</p>
<p>The nice thing about conditionals is that they follow logical operations. They can also be used to test equality. Let’s do a small example. Let’s say I want to make a piece of code that converts from a numerical grade (1-100) to a letter grade (A, B, C, D, F). The code would look like this:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">grade</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your grade: "</span><span class="p">)</span>
<span class="k">if</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">70</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">65</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"D"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"F"</span><span class="p">)</span></code></pre>
</figure>
<p>What happens if<span> </span><code class="highlighter-rouge">grade</code><span> </span>is 50? All the conditions are false, so<span> </span><code class="highlighter-rouge">"F"</code><span> </span>gets printed on the screen. But what if<span> </span><code class="highlighter-rouge">grade</code><span> </span>is 95? Then all the conditions are true and everything gets printed, right? Nope! What happens is the program goes line by line. The first condition (grade &gt;= 90) is satisfied, so the program enters into the code inside the<span> </span><code class="highlighter-rouge">if</code><span> </span>statement, executing<span> </span><code class="highlighter-rouge">print("A")</code>. Once code inside a conditional has been executed, the rest of the conditions are skipped and none of the other conditionals are checked.</p>
<p><strong>列出少於10</strong></p>
<div><i><span><span>如果有條件，則列出數字元素</span></span></i></div>
<p><strong>練習3和解決方法</strong></p>
<p><strong>例如說一個</strong></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，打印出列表中小於5的所有元素。</span></span></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>而不是一個一個地打印元素，而是創建一個新列表，其中該列表中的所有元素少於5個，然後打印出該新列表。</span></span></li>
<li><span><span>用一行Python編寫。</span></span></li>
<li><span><span>向用戶詢問一個數字，然後返回一個列表，該列表僅包含原始列表</span></span><code class="highlighter-rouge">a</code><span><span>中小於用戶給定數字的</span><span>元素</span><span>。</span></span></li>
</ol>
<p><span><span>討論區</span></span></p>
<p><span><span>本週主題：</span></span></p>
<ol>
<li><span><span>清單</span></span></li>
<li><span><span>更多條件（如果語句）</span></span></li>
</ol>
<p><span><span>清單</span></span></p>
<p><span><span>本週的練習涉及一個對所有類型和風格的編程都至關重要的主題：</span></span><strong><span><span>list</span></span></strong><span><span>。</span><span>列表基本上是一種將事物（稱為</span></span><strong><span><span>elements</span></span></strong><span><span>）</span><span>進行分組的有序方式-Python中</span><span>列表的最酷的事情是，您可以擁有一個包含多種類型的對象的列表。</span><span>您的列表可以混合在字符串，整數，對象，其他列表之間，包括您所擁有的。</span></span></p>
<p><span><span>構造一個空列表的方法就是</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="p">[]</span></code></pre>
</figure>
<p><span></span><code class="highlighter-rouge">x</code><span><span>現在</span><span>，您的變量</span><span>包含一個空列表。</span><span>要將內容添加到此列表中，只需將它們“添加”到列表中即可。</span><span>像這樣：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">x</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">x</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>您的清單</span></span><code class="highlighter-rouge">x</code><span><span>現在看起來像</span></span><code class="highlighter-rouge">[3]</code><span><span>。</span></span></p>
<p><span><span>在Python中，列表也是</span></span><strong><span><span>可迭代的</span></span></strong><span><span>，這意味著您可以</span><span>方便地</span><span>使用</span></span><strong><span><span>for循環</span></span></strong><span><span>遍歷它們</span><span>。</span><span>（如果您來自其他語言，例如C ++或Java，則最有可能習慣於使用計數器循環遍歷列表的索引-在Python中，您實際上可以循環遍曆元素。）我將讓代碼說明自己：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">my_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">"Michele"</span><span class="p">,</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]]</span>
<span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">my_list</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="n">element</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>將產生結果：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">1 <span></span>
3<span></span>
"Michele"<span></span>
[5, 6, 7]</code></pre>
</figure>
<p><span><span>列表還有許多其他屬性，但是對於基本練習而言，您只需要此for循環屬性。</span><span>未來幾週將處理列表的其他屬性。</span></span></p>
<p><span><span>有關Python中列表的更多信息，請查看以下資源：</span></span></p>
<ul>
<li><a href="http://docs.python.org/3.3/tutorial/datastructures.html"><span><span>列表中的官方Python文檔</span></span></a></li>
<li><a href="http://www.tutorialspoint.com/python/python_lists.htm"><span><span>Python清單上的Tutorialspoint</span></span></a></li>
<li><span><span><a href="http://effbot.org/zone/python-list.htm">他人關於列表的博客文章</a></span></span></li>
</ul>
<p><strong>更多條件</strong></p>
<p><span><span>關於條件的好處是它們遵循邏輯運算。</span><span>它們也可以用於測試相等性。</span><span>讓我們做一個小例子。</span><span>假設我要編寫一段代碼，將其從數字等級（1-100）轉換為字母等級（A，B，C，D，F）。</span><span>代碼如下所示：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">grade</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your grade: "</span><span class="p">)</span>
<span class="k">if</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">90</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"A"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">80</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"B"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">70</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"C"</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">grade</span> <span class="o">&gt;=</span> <span class="mi">65</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"D"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"F"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>如果</span></span><code class="highlighter-rouge">grade</code><span><span>是50，</span><span>會發生什麼</span><span>？</span><span>所有條件均為假，因此</span></span><code class="highlighter-rouge">"F"</code><span><span>將其打印在屏幕上。</span><span>但是，如果</span></span><code class="highlighter-rouge">grade</code><span><span>是95，該怎麼辦？</span><span>然後所有條件都成立，一切都打印出來了，對吧？</span><span>不！</span><span>程序將逐行執行。</span><span>滿足第一個條件（等級&gt; = 90），因此程序將輸入</span></span><code class="highlighter-rouge">if</code><span><span>語句</span><span>內的代碼</span><span>，執行</span></span><code class="highlighter-rouge">print("A")</code><span><span>。</span><span>一旦執行了條件語句中的代碼，將跳過其餘條件，並且不檢查其他條件。</span></span></p>
<h3>P4</h3>
<p>DIVISORSE</p>
<div><br/><i></i></div>
<div>EXECISE FOUR</div>
<p>Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a<span> </span><em>divisor</em><span> </span>is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)</p>
<p>DISCOSIONE</p>
<p>The topics that you need for this exercise combine lists, conditionals, and user input. There is a new concept of creating lists.</p>
<p>There is an easy way to programmatically create lists of numbers in Python.</p>
<p>To create a list of numbers from 2 to 10, just use the following code:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">x</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span></code></pre>
</figure>
<p>Then the variable<span> </span><code class="highlighter-rouge">x</code><span> </span>will contain the list<span> </span><code class="highlighter-rouge">[2, 3, 4, 5, 6, 7, 8, 9, 10]</code>. Note that the second number in the<span> </span><code class="highlighter-rouge">range()</code><span> </span>function is not included in the original list.</p>
<p>Now that<span> </span><code class="highlighter-rouge">x</code><span> </span>is a list of numbers, the same for loop can be used with the list:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span> 
    <span class="k">print</span> <span class="n">elem</span></code></pre>
</figure>
<p>Will yield the result:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  2
  3
  4
  5
  6
  7
  8
  9
  10</code></pre>
</figure>
<p><strong>除數</strong></p>
<div><br/><i></i></div>
<div><strong>練習4和解決方法</strong></div>
<p><span><span>創建一個程序，詢問用戶一個數字，然後打印出該數字的所有除數的列表。</span><span>（如果您不知道</span></span><em><span><span>除數</span></span></em><span><span>是多少，該數字將被除以另一個數。例如，13是26的除數，因為26/13沒有餘數。）</span></span></p>
<p><strong>討論區</strong></p>
<p><span><span>本練習需要的主題包括列表，條件和用戶輸入。</span><span>有一個創建列表的新概念。</span></span></p>
<p><span><span>有一種簡便的方法可以在Python中以編程方式創建數字列表。</span></span></p>
<p><span><span>要創建2到10的數字列表，只需使用以下代碼：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">x</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>然後，變量</span></span><code class="highlighter-rouge">x</code><span><span>將包含列表</span></span><code class="highlighter-rouge">[2, 3, 4, 5, 6, 7, 8, 9, 10]</code><span><span>。</span><span>請注意，</span></span><code class="highlighter-rouge">range()</code><span><span>函數</span><span>中的第二個數字</span><span>不包括在原始列表中。</span></span></p>
<p><span><span>現在這</span></span><code class="highlighter-rouge">x</code><span><span>是一個數字列表，該列表可以使用相同的for循環：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span> 
    <span class="k">print</span> <span class="n">elem</span></code></pre>
</figure>
<p><span><span>將產生結果：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  2<span></span>
  3<span></span>
  4<span></span>
  5<span></span>
  6<span></span>
  7<span></span>
  8<span></span>
  9<span></span>
  10<br/><br/></code></pre>
</figure>
<h3>P5</h3>
<p>LIST OVER LAPS</p>
<div><br/><i></i></div>
<div>EXERCISE FIVE</div>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
  <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.</p>
<p>Extras:</p>
<ol>
<li>Randomly generate two lists to test this</li>
<li>Write this in one line of Python (don’t worry if you can’t figure this out at this point - we’ll get to it soon)</li>
</ol>
<p>LIST PROPERTISE</p>
<p>In other words, “things you can do with lists.”</p>
<p>One of the interesting things you can do with lists in Python is figure out whether something is inside the list or not. For example:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20]
  &gt;&gt;&gt; 10 in a
  True
  &gt;&gt;&gt; 3 in a
  False</code></pre>
</figure>
<p>You can of course use this in loops, conditionals, and any other programming constructs.</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">list_of_students</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Michele"</span><span class="p">,</span> <span class="s">"Sara"</span><span class="p">,</span> <span class="s">"Cassie"</span><span class="p">]</span>

  <span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Type name to check: "</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">list_of_students</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"This student is enrolled."</span><span class="p">)<br/><br/><strong>清單重疊</strong></span></code></pre>
<div><br/><i></i></div>
<div>練習五合解決方法</div>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
  <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span></span></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
<li><span><span>用Python的一行代碼編寫（不要擔心，如果您現在不能解決這個問題，我們會盡快處理）</span></span></li>
</ol>
<p><span><span>列出屬性</span></span></p>
<p><span><span>換句話說，“您可以使用列表執行的操作”。</span></span></p>
<p><span><span>您可以使用Python中的列表進行有趣的操作之一，就是確定列表中是否包含某些內容。</span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20]<span></span>
  &gt;&gt;&gt; 10 in a<span></span>
  True<span></span>
  &gt;&gt;&gt; 3 in a<span></span>
  False</code></pre>
</figure>
<p><span><span>您當然可以在循環，條件和任何其他編程構造中使用它。</span></span></p>
<pre><code class="language-python" data-lang="python">  <span class="n">list_of_students</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Michele"</span><span class="p">,</span> <span class="s">"Sara"</span><span class="p">,</span> <span class="s">"Cassie"</span><span class="p">]</span>

  <span class="n">name</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Type name to check: "</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">list_of_students</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"This student is enrolled."</span><span class="p">)</span></code></pre>
<code class="language-python" data-lang="python"><span class="p"><br/></span></code></figure>
<h3>P6</h3>
<p>字串清單</p>
<div><i><span><span>字符串列表索引</span></span></i></div>
<div><strong><i>練習六和解決方法</i></strong></div>
<p><span><span>向用戶詢問一個字符串，然後打印出該字符串是否是回文。</span><span>（</span></span><strong><span><span>回文</span></span></strong><span><span>是指向前和向後讀取相同字符串的字符串。）</span></span></p>
<p><strong>討論區</strong></p>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>列表索引</span></span></li>
<li><span><span>字符串是列表</span></span></li>
</ul>
<p><span><span>列表索引</span></span></p>
<p><span><span>在Python（以及大多數通用編程）中，您從數字0開始計數列表。列表中的第一個元素是“數字0”，第二個元素是“數字1”，依此類推。</span></span></p>
<p><span><span>結果，當您要從列表中刪除單個元素時，可以向列表中請求該number元素：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20, 25]<span></span>
  &gt;&gt;&gt; a[3]<span></span>
  20<span></span>
  &gt;&gt;&gt; a[0]<span></span>
  5</code></pre>
</figure>
<p><span><span>還有一種便捷的方法來獲取兩個索引之間的子列表：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20, 25, 30, 35, 40]<span></span>
  &gt;&gt;&gt; a[1:4]<span></span>
  [10, 15, 20]<span></span>
  &gt;&gt;&gt; a[6:]<span></span>
  [35, 40]<span></span>
  &gt;&gt;&gt; a[:-1]<span></span>
  [5, 10, 15, 20, 25, 30, 35]</code></pre>
</figure>
<p><span><span>第一個數字是“開始索引”，最後一個數字是“結束索引”。</span></span></p>
<p><span><span>您還可以在索引中包含第三個數字，以計算應該從列表中讀取的頻率：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20, 25, 30, 35, 40]<span></span>
  &gt;&gt;&gt; a[1:5:2]<span></span>
  [10, 20]<span></span>
  &gt;&gt;&gt; a[3:0:-1]<span></span>
  [15, 10, 5]</code></pre>
</figure>
<p><span><span>要閱讀整個列表，只需使用變量名（在上面的示例中</span></span><code class="highlighter-rouge">a</code><span><span>），或者也可以</span></span><code class="highlighter-rouge">[:]</code><span><span>在變量名的末尾</span><span>使用</span><span>（在以上示例中的</span></span><code class="highlighter-rouge">a[:]</code><span><span>）。</span></span></p>
<p><strong>字符串是列表</strong></p>
<p><span><span>因為字符串是列表，所以您可以將對列表所做的所有操作都字符串化。</span><span>您可以遍歷它們：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">string</span> <span class="o">=</span> <span class="s">"example"</span>
  <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span> 
    <span class="k">print</span> <span class="s">"one letter: "</span> <span class="o">+</span> <span class="n">c</span></code></pre>
</figure>
<p><span><span>將給出結果：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  one letter: e<span></span>
  one letter: x<span></span>
  one letter: a<span></span>
  one letter: m<span></span>
  one letter: p<span></span>
  one letter: l<span></span>
  one letter: e</code></pre>
</figure>
<p><span><span>您可以列出子列表：</span></span></p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; string = "example"<span></span>
  &gt;&gt;&gt; s = string[0:5]<span></span>
  &gt;&gt;&gt; print s<span></span>
  examp</code></pre>
</figure>
<p><span><span>現在，其中</span></span><code class="highlighter-rouge">s</code><span><span>包含字符串“ examp”。</span></span></p>
<p><span><span>故事的寓意：字符串是一個列表。</span></span></p>
<p><strong>STRING LIST</strong></p>
<div><i>strings lists index</i></div>
<div><i> </i></div>
<div><i>EXERCISE LIST</i></div>
<p>Ask the user for a string and print out whether this string is a palindrome or not. (A<span> </span><strong>palindrome</strong><span> </span>is a string that reads the same forwards and backwards.)</p>
<p>DISCUSION</p>
<p>Concepts for this week:</p>
<ul>
<li>List indexing</li>
<li>Strings are lists</li>
</ul>
<p></p>
<p>In Python (and most programming in general), you start counting lists from the number 0. The first element in a list is “number 0”, the second is “number 1”, etc.</p>
<p>As a result, when you want to get single elements out of a list, you can ask a list for that number element:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20, 25]
  &gt;&gt;&gt; a[3]
  20
  &gt;&gt;&gt; a[0]
  5</code></pre>
</figure>
<p>There is also a convenient way to get sublists between two indices:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20, 25, 30, 35, 40]
  &gt;&gt;&gt; a[1:4]
  [10, 15, 20]
  &gt;&gt;&gt; a[6:]
  [35, 40]
  &gt;&gt;&gt; a[:-1]
  [5, 10, 15, 20, 25, 30, 35]</code></pre>
</figure>
<p>The first number is the “start index” and the last number is the “end index.”</p>
<p>You can also include a third number in the indexing, to count how often you should read from the list:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; a = [5, 10, 15, 20, 25, 30, 35, 40]
  &gt;&gt;&gt; a[1:5:2]
  [10, 20]
  &gt;&gt;&gt; a[3:0:-1]
  [15, 10, 5]</code></pre>
</figure>
<p>To read the whole list, just use the variable name (in the above examples,<span> </span><code class="highlighter-rouge">a</code>), or you can also use<span> </span><code class="highlighter-rouge">[:]</code><span> </span>at the end of the variable name (in the above examples,<span> </span><code class="highlighter-rouge">a[:]</code>).</p>
<p><strong>STRING LISTS</strong></p>
<p>Because strings are lists, you can do to strings everything that you do to lists. You can iterate through them:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">string</span> <span class="o">=</span> <span class="s">"example"</span>
  <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span> 
    <span class="k">print</span> <span class="s">"one letter: "</span> <span class="o">+</span> <span class="n">c</span></code></pre>
</figure>
<p>Will give the result:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  one letter: e
  one letter: x
  one letter: a
  one letter: m
  one letter: p
  one letter: l
  one letter: e</code></pre>
</figure>
<p>You can take sublists:</p>
<figure class="highlight">
<pre><code class="language-pycon" data-lang="pycon">  &gt;&gt;&gt; string = "example"
  &gt;&gt;&gt; s = string[0:5]
  &gt;&gt;&gt; print s
  examp</code></pre>
</figure>
<p>Now<span> </span><code class="highlighter-rouge">s</code><span> </span>has the string “examp” in it.</p>
<p>Moral of the story: a string is a list.</p>
<div id="tipue_search_content">
<h3>p7</h3>
<p>List Comperhensions </p>
<p>Exercise 7 (and <a href="https://www.practicepython.org/solution/2014/03/26/07-list-comprehensions-solutions.html">Solution</a>)</p>
<p>Let’s say I give you a list saved in a variable:<span> </span><code class="highlighter-rouge">a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>. Write one line of Python that takes this list<span> </span><code class="highlighter-rouge">a</code><span> </span>and makes a new list that has only the even elements of this list in it.</p>
<p><strong>Discussion</strong></p>
<p>Concepts for this week:</p>
<ul>
<li>List comprehensions</li>
</ul>
<p><strong>List comprehensions</strong></p>
<p>The idea of a<span> </span><em>list comprehension</em><span> </span>is to make code more compact to accomplish tasks involving lists. Take for example this code:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">years_of_birth</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">1991</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1992</span><span class="p">,</span> <span class="mi">1991</span><span class="p">]</span>
  <span class="n">ages</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years_of_birth</span><span class="p">:</span> 
    <span class="n">ages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2014</span> <span class="o">-</span> <span class="n">year</span><span class="p">)</span></code></pre>
</figure>
<p>And at the end, the variable<span> </span><code class="highlighter-rouge">ages</code><span> </span>has the list<span> </span><code class="highlighter-rouge">[24, 23, 24, 24, 22, 23]</code>. What this code did was translate the years of birth into ages, and it took us a for loop and an append statement to a new list to do that.</p>
<p><span></span></p>
<p>Compare to this piece of code:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">years_of_birth</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">1991</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1992</span><span class="p">,</span> <span class="mi">1991</span><span class="p">]</span>
  <span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2014</span> <span class="o">-</span> <span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years_of_birth</span><span class="p">]</span></code></pre>
</figure>
<p>The second line here - the line with<span> </span><code class="highlighter-rouge">ages</code><span> </span>is a<span> </span><em>list comprehension.</em></p>
<p>It accomplishes the same thing as the first code sample - at the end, the<span> </span><code class="highlighter-rouge">ages</code><span> </span>variable has a list containing<span> </span><code class="highlighter-rouge">[24, 23, 24, 24, 22, 23]</code>, the ages corresponding to all the birthdates.</p>
<p>The idea of the list comprehension is to condense the for loop and the list appending into one simple line. Notice that the for loop just shifted to the end of the list comprehension, and the part before the<span> </span><code class="highlighter-rouge">for</code><span> </span>keyword is the thing to append to the end of the new list.</p>
<p>You can also embed<span> </span><code class="highlighter-rouge">if</code><span> </span>statements into the list comprehension - check out<span> </span><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">this reference</a><span> </span>to help you out. There are many examples and a better explanation than I can ever give.</p>
<p><strong>Happy coding!</strong></p>
<p><strong></strong></p>
<p><strong>清單理解</strong></p>
<p><strong>練習7 (和<a href="https://www.practicepython.org/solution/2014/03/26/07-list-comprehensions-solutions.html">解決方案</a>)</strong></p>
<p>比方說我給您一個保存在變量中的列表：<code class="highlighter-rouge">a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>。編寫一行Python來獲取此列表，<code class="highlighter-rouge">a</code>並創建一個僅包含該列表偶數元素的新列表。<strong></strong></p>
<p><strong>討論區</strong></p>
<p>本週的概念：</p>
<ul>
<li>清單理解</li>
</ul>
<p><strong>清單理解</strong></p>
<p>列表理解<span><span>的思想</span><span>是使代碼更緊湊，以完成涉及列表的任務。</span><span>以下面的代碼為例：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python"><span class="n">years_of_birth</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">1991</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1992</span><span class="p">,</span> <span class="mi">1991</span><span class="p">]</span>
  <span class="n">ages</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years_of_birth</span><span class="p">:</span> 
    <span class="n">ages</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2014</span> <span class="o">-</span> <span class="n">year</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>最後，變量</span></span><code class="highlighter-rouge">ages</code><span><span>具有list<span> </span></span></span><code class="highlighter-rouge">[24, 23, 24, 24, 22, 23]</code><span><span>。</span><span>這段代碼所做的就是將出生的歲月轉換成年齡，然後我們使用了for循環，並在新列表中添加了一個append語句來做到這一點。</span></span></p>
<p><span><span>比較這段代碼：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">years_of_birth</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">1991</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1990</span><span class="p">,</span> <span class="mi">1992</span><span class="p">,</span> <span class="mi">1991</span><span class="p">]</span>
  <span class="n">ages</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2014</span> <span class="o">-</span> <span class="n">year</span> <span class="k">for</span> <span class="n">year</span> <span class="ow">in</span> <span class="n">years_of_birth</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>這裡的第二行-與的行</span></span><code class="highlighter-rouge">ages</code><span><span>是</span></span><em><span><span>列表理解。</span></span></em></p>
<p><span><span>它完成了與第一個代碼示例相同的任務-最後，該</span></span><code class="highlighter-rouge">ages</code><span><span>變量具有一個列表，其中包含</span></span><code class="highlighter-rouge">[24, 23, 24, 24, 22, 23]</code><span><span>，其年齡對應於所有生日。</span></span></p>
<p><span><span>列表理解的思想是壓縮for循環，並將列表追加到一條簡單的行中。</span><span>請注意，for循環剛剛移到列表理解的末尾，而</span></span><code class="highlighter-rouge">for</code><span><span>關鍵字</span><span>之前的部分</span><span>是要附加到新列表末尾的東西。</span></span></p>
<p><span><span>您還可以將</span></span><code class="highlighter-rouge">if</code><span><span>語句</span><span>嵌入</span><span>到列表理解中-請查閱</span></span><a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions"><span><span>此參考資料</span></span></a><span><span>以幫助您。</span><span>有許多例子和比我能提供的更好的解釋。</span></span></p>
<p><span><span>祝您編碼愉快！</span></span></p><h3>p8</h3>
<p><strong>Rock Paper Scissors</strong></p>
<p><strong>Exercise 8 (and <a href="https://www.practicepython.org/solution/2014/04/02/08-rock-paper-scissors-solutions.html">Solution</a>)</strong></p>
<p>Make a two-player Rock-Paper-Scissors game. (<em>Hint: Ask for player plays (using<span> </span><code class="highlighter-rouge">input</code>), compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game</em>)</p>
<p>Remember the rules:</p>
<ul>
<li>Rock beats scissors</li>
<li>Scissors beats paper</li>
<li>Paper beats rock</li>
</ul>
<p><strong>Discussion</strong></p>
<p>Concepts for this week:</p>
<ul>
<li>While loops</li>
<li>Infinite loops</li>
<li>Break statements</li>
</ul>
<p><strong>While loops</strong></p>
<p>We have already discussed<span> </span><code class="highlighter-rouge">for</code><span> </span>loops, or loops that look sequentially (one by one) at elements in a list. There is a second type of loop that works in a slightly different way called a<span> </span><code class="highlighter-rouge">while</code><span> </span>loop.</p>
<p>The idea is simple: while a certain condition is<span> </span><code class="highlighter-rouge">True</code>, keep doing something. For example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">-=</span> <span class="mi">1</span></code></pre>
</figure>
<p>The output of this code segment is:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="mi">5</span>
  <span class="mi">4</span>
  <span class="mi">3</span>
  <span class="mi">2</span>
  <span class="mi">1</span></code></pre>
</figure>
<p>A particularly useful way to use<span> </span><code class="highlighter-rouge">while</code><span> </span>loops is checking user input for correctness. For example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">quit</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Type "enter" to quit:'</span> <span class="p">)</span>
  <span class="k">while</span> <span class="n">quit</span> <span class="o">!=</span> <span class="s">"enter"</span><span class="p">:</span>
    <span class="n">quit</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Type "enter" to quit:'</span> <span class="p">)</span></code></pre>
</figure>
<p>The uses for this are infinite, and can (and should!) be combined with conditionals to yield the most efficient results.</p>
<p><strong>Infinite loops</strong></p>
<p>An infinite loop is a loop that never stops. This means that the condition in the beginning of the while loop will always be true.</p>
<p>For example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Inside the loop"</span><span class="p">)</span></code></pre>
</figure>
<p>What will happen is the loop will print out the phrase “Inside the loop” forever and ever. If you are running your computer, you will have to “kill the program” to stop it. Each operating system has a different way of “killing a program” to get out of an infinite loop.</p>
<p>On Linux: in the terminal, type “CTRL-C” to kill the program that is currently running in the terminal. If you are using the IDLE Python IDE, then you must press “CTRL-D” to exit your running program. When in doubt, do a Google search before you start programming!</p>
<p>On Windows: type “CTRL-ALT-DEL” and open the task manager to kill the program.</p>
<p>On Mac: right-click on the task, and kill the program that is running forever.</p>
<p>If you find yourself in an infinite loop, your program will never end.</p>
<p><strong>Break statements</strong></p>
<p>A<span> </span><code class="highlighter-rouge">break</code><span> </span>statement stops the execution of a loop before the original condition is met. While the use of a<span> </span><code class="highlighter-rouge">break</code><span> </span>statement will often start an argument about good coding practices, sometimes it is useful.</p>
<p>For example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span> 
    <span class="n">usr_command</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your command: "</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">usr_command</span> <span class="o">==</span> <span class="s">"quit"</span><span class="p">:</span>
      <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span> 
      <span class="k">print</span><span class="p">(</span><span class="s">"You typed "</span> <span class="o">+</span> <span class="n">usr_command</span><span class="p">)</span></code></pre>
</figure>
<p>In this case, the<span> </span><code class="highlighter-rouge">break</code><span> </span>statement is used to break off the “infinite while loop” that we have constructed with the<span> </span><code class="highlighter-rouge">while True</code><span> </span>statement.</p>
<p><strong>Happy coding!</strong></p>
<p></p>
<p>剪<strong>刀石頭布</strong></p>
<div><strong>練習8（和<a href="https://www.practicepython.org/solution/2014/04/02/08-rock-paper-scissors-solutions.html">解決方案</a>）</strong><br/><i></i></div>
<p><span><span>製作兩人石頭剪刀布遊戲。</span><span>（</span></span><em><span><span>提示：（使用</span></span><code class="highlighter-rouge">input</code><span><span>）</span><span>詢問玩家玩法</span><span>，進行比較，打印出對獲勝者表示祝賀的消息，並詢問玩家是否要開始新遊戲</span></span></em><span><span>）</span></span></p>
<p><span><span>記住規則：</span></span></p>
<ul>
<li><span><span>搖滾剪刀</span></span></li>
<li><span><span>剪刀打紙</span></span></li>
<li><span><span>紙打石頭</span></span></li>
</ul>
<p><strong>討論區</strong></p>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>While循環</span></span></li>
<li><span><span>無限循環</span></span></li>
<li><span><span>中斷聲明</span></span></li>
</ul>
<p><strong>While循環</strong></p>
<p><span><span>我們已經討論過</span></span><code class="highlighter-rouge">for</code><span><span>循環，或循環（逐一）查看列表中的元素的循環。</span><span>還有第二種類型的循環，其工作方式略有不同，稱為</span></span><code class="highlighter-rouge">while</code><span><span>循環。</span></span></p>
<p><span><span>這個想法很簡單：在一定條件下</span></span><code class="highlighter-rouge">True</code><span><span>，繼續做某事。</span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">-=</span> <span class="mi">1</span></code></pre>
</figure>
<p><span><span>該代碼段的輸出為：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="mi">5</span>
  <span class="mi">4</span>
  <span class="mi">3</span>
  <span class="mi">2</span>
  <span class="mi">1</span></code></pre>
</figure>
<p><span><span>使用</span></span><code class="highlighter-rouge">while</code><span><span>循環的</span><span>一種特別有用的方法</span><span>是檢查用戶輸入的正確性。</span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">quit</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Type "enter" to quit:'</span> <span class="p">)</span>
  <span class="k">while</span> <span class="n">quit</span> <span class="o">!=</span> <span class="s">"enter"</span><span class="p">:</span>
    <span class="n">quit</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Type "enter" to quit:'</span> <span class="p">)</span></code></pre>
</figure>
<p><span><span>此方法的用途是無限的，並且可以（並且應該！）與條件條件結合使用以產生最有效的結果。</span></span></p>
<p><strong>無限循環</strong></p>
<p><span><span>無限循環是永不停止的循環。</span><span>這意味著while循環開始時的條件將始終為true。</span></span></p>
<p><span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Inside the loop"</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>將會發生的是，循環將永遠打印出短語“ Inside the loop”。</span><span>如果您正在運行計算機，則必須“殺死該程序”以將其停止。</span><span>每個操作系統都有不同的“殺死程序”以擺脫無限循環的方式。</span></span></p>
<p><span><span>在Linux上：在終端中，鍵入“ CTRL-C”以終止終端中當前正在運行的程序。</span><span>如果使用的是IDLE Python IDE，則必須按“ CTRL-D”退出正在運行的程序。</span><span>如有疑問，請在開始編程之前進行Google搜索！</span></span></p>
<p><span><span>在Windows上：鍵入“ CTRL-ALT-DEL”並打開任務管理器以終止程序。</span></span></p>
<p><span><span>在Mac上：右鍵單擊該任務，然後終止永久運行的程序。</span></span></p>
<p><span><span>如果發現自己陷入無限循環，則程序將永遠不會結束。</span></span></p>
<p><strong>中斷聲明</strong></p>
<p><span></span><code class="highlighter-rouge">break</code><span><span>在滿足原始條件之前，</span><span>一條</span><span>語句將停止執行循環。</span><span>儘管使用</span></span><code class="highlighter-rouge">break</code><span><span>語句通常會引發有關良好編碼實踐的爭論，但有時它很有用。</span></span></p>
<p><span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span> 
    <span class="n">usr_command</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter your command: "</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">usr_command</span> <span class="o">==</span> <span class="s">"quit"</span><span class="p">:</span>
      <span class="k">break</span>
    <span class="k">else</span><span class="p">:</span> 
      <span class="k">print</span><span class="p">(</span><span class="s">"You typed "</span> <span class="o">+</span> <span class="n">usr_command</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>在這種情況下，該</span></span><code class="highlighter-rouge">break</code><span><span>語句用於中斷我們使用該</span></span><code class="highlighter-rouge">while True</code><span><span>語句</span><span>構造的“無限while循環”<span> </span></span><span>。</span></span></p>
<p><strong>祝您編碼愉快！</strong></p>
<h3>p9</h3>
<strong>Guessing Gmae One </strong>
<p><strong>Exercise 9 (and <a href="https://www.practicepython.org/solution/2014/04/10/09-guessing-game-one-solutions.html">Solution</a>)</strong></p>
<p>Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. (<em>Hint: remember to use the user input lessons from the very<span> </span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html">first exercise</a></em>)</p>
<p>Extras:</p>
<ul>
<li>Keep the game going until the user types “exit”</li>
<li>Keep track of how many guesses the user has taken, and when the game ends, print this out.</li>
</ul>
<p><strong>Discussion</strong></p>
<p>Concepts for this week:</p>
<ul>
<li>Modules</li>
<li>Random numbers</li>
<li>User input</li>
</ul>
<p><strong>Random Numbers (and Modules)</strong></p>
<p>This is your first exposure to using Python code that somebody else wrote. In Python, these formally-distributed code packages are called<span> </span><em>modules</em>. The thing we want from a module in this exercise is the ability to generate random numbers. This comes from the<span> </span><em>random</em><span> </span>module.</p>
<p>To use a module, at the top of your file, type</p>
<pre><code class="language-python" data-lang="python">	<span class="kn">import</span> <span class="nn">random</span></code></pre>
<p>This means you are allowing your Python program to use a module called<span> </span><code class="highlighter-rouge">random</code><span> </span>in the rest of your code.</p>
<p>To use it (and generate a random integer), now type:</p>
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span></code></pre>
<p>Once you run this program, the variable<span> </span><code class="highlighter-rouge">a</code><span> </span>will have a random integer that the computer made for you, between 2 and 6 (including 2 and 6). The specific documentation for this method is<span> </span><a href="https://docs.python.org/3.3/library/random.html#random.randint">here</a>.</p>
<p>There are many ways you can generate random numbers - integers, decimals, and much more. The<span> </span><a href="https://docs.python.org/3.3/library/random.html">Python documentation</a><span> </span>has much more detailed information about what is possible from the<span> </span><code class="highlighter-rouge">random</code><span> </span>module.</p>
<p><strong>User input</strong></p>
<p>We covered all you need to know in the<span> </span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html">first exercise</a><span> </span>of this blog!</p>
<p><strong>Happy coding!</strong></p>
<p><strong>猜遊戲一</strong></p>
<p><strong>練習9 (和<a href="https://www.practicepython.org/solution/2014/04/10/09-guessing-game-one-solutions.html">解決方案</a>)</strong></p>
<p><span><span>生成1到9之間的隨機數（包括1到9）。</span><span>讓用戶猜數字，然後告訴他們猜的是太低，太高還是完全正確。</span><span>（</span></span><em><span><span>提示：請記住在</span></span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html"><span><span>第一練習中</span></span></a></em><span><em><span>使用用戶輸入的課程</span></em><span>）</span></span></p>
<p><span><span>附加功能：</span></span></p>
<ul>
<li><span><span>繼續遊戲，直到用戶鍵入“退出”</span></span></li>
<li><span><span>跟踪用戶進行了多少猜測，當遊戲結束時，將其打印出來。</span></span></li>
</ul>
<p><strong>討論區</strong></p>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>模組</span></span></li>
<li><span><span>隨機數</span></span></li>
<li><span><span>用戶輸入</span></span></li>
</ul>
<p><strong>隨機數（和模塊）</strong></p>
<p><span><span>這是您第一次使用別人編寫的Python代碼。</span><span>在Python中，這些正式分發的代碼包稱為</span></span><em><span><span>modules</span></span></em><span><span>。</span><span>在本練習中，我們希望從模塊獲得的是生成隨機數的能力。</span><span>這來自</span></span><em><span><span>隨機</span></span></em><span><span>模塊。</span></span></p>
<p><span><span>要使用模塊，請在文件頂部鍵入</span></span></p>
<pre><code class="language-python" data-lang="python">	<span class="kn">import</span> <span class="nn">random</span></code></pre>
<p><span><span>這意味著您允許Python程序使用</span></span><code class="highlighter-rouge">random</code><span><span>在其餘代碼中</span><span>調用的模塊</span><span>。</span></span></p>
<p><span><span>要使用它（並生成一個隨機整數），現在鍵入：</span></span></p>
<p class="highlight"></p>
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span></code></pre>
<p></p>
<p><span><span>一旦運行此程序，該變量</span></span><code class="highlighter-rouge">a</code><span><span>將具有計算機為您生成的隨機整數，介於2到6之間（包括2到6）。</span><span>此方法的特定文檔</span></span><a href="https://docs.python.org/3.3/library/random.html#random.randint"><span><span>在此處</span></span></a><span><span>。</span></span></p>
<p><span><span>您可以通過多種方式生成隨機數-整數，小數等。</span><span>在</span></span><a href="https://docs.python.org/3.3/library/random.html"><span><span>Python文檔</span></span></a><span><span>有更詳細的了解什麼是可能從信息</span></span><code class="highlighter-rouge">random</code><span><span>模塊。</span></span></p>
<p><strong>用戶輸入</strong></p>
<p><span><span>我們在</span><span>本博客</span><span>的</span></span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html"><span><span>第一個練習</span></span></a><span><span>中</span><span>介紹了您需要了解的所有信息</span><span>！</span></span></p>
<p><strong>祝您編碼愉快！</strong></p>
<h3>P10</h3>
List Overlap comprehensions</div>
<div class="activitywrap purpose learnbydoing flash"></div>
<div class="activitywrap purpose learnbydoing flash">Exercise 10 (and<span> </span><a href="https://www.practicepython.org/solution/2014/04/16/10-list-overlap-comprehensions-solutions.html">Solution</a>)
<p>This week’s exercise is going to be revisiting an old exercise (see<span> </span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a>), except require the solution in a different way.</p>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this<span> </span><s>in one line of Python</s><span> </span><em>using at least one list comprehension</em>. (<em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em>).</p>
<p><em>The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using<span> </span><code class="highlighter-rouge">set</code>s that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the<span> </span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><code class="highlighter-rouge">set</code><span> </span>command in Python 3.3</a>, or try to implement this on your own and use at least one list comprehension in the solution.</em></p>
<p>Extra:</p>
<ul>
<li>Randomly generate two lists to test this</li>
</ul>
Discussion
<p>Concepts for this week:</p>
<ul>
<li>List comprehensions</li>
<li>Random numbers, continued</li>
</ul>
List comprehensions
<p>We already discussed list comprehensions in<span> </span><a href="http://practicepython.blogspot.com/2014/03/exercise-7-list-comprehensions.html">Exercise 7</a>, but they can be made much more complicated.</p>
<p>For example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">allproducts</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span><span class="p">]</span></code></pre>
</figure>
<p>At the end of this piece of code,<span> </span><code class="highlighter-rouge">allproducts</code><span> </span>will contain the list<span> </span><code class="highlighter-rouge">[5, 10, 15, 10, 20, 30, 15, 30, 45]</code>. So you can put multiple for loops inside the comprehension. But you can also add more complicated conditionals:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">customlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span> <span class="k">if</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">]</span></code></pre>
</figure>
<p>Now<span> </span><code class="highlighter-rouge">customlist</code><span> </span>contains<span> </span><code class="highlighter-rouge">[5, 15, 15, 45]</code><span> </span>because only the odd products are added to the list.</p>
<p>In general, the list comprehension takes the form:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="p">[</span><span class="n">EXPRESSION</span> <span class="n">FOR_LOOPS</span> <span class="n">CONDITIONALS</span><span class="p">]</span></code></pre>
</figure>
<p>as shown in the examples above.</p>
Random numbers, continued
<p>Try to use the<span> </span><a href="https://docs.python.org/3.0/library/random.html">Python random documentation</a><span> </span>to figure out how to generate a random list. As a hint look below:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span></code></pre>
</figure>
<p>This line of code will leave<span> </span><code class="highlighter-rouge">a</code><span> </span>containing a list of 5 random numbers from 0 to 99.</p>
列表重疊理解<br/><span></span><span><span>練習10（和</span></span><a href="https://www.practicepython.org/solution/2014/04/16/10-list-overlap-comprehensions-solutions.html"><span><span>解決方案</span></span></a><span><span>）</span></span>
<p><span><span>本週的練習將重溫舊的練習（請參閱</span></span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span><span>練習5</span></span></a><span><span>），只是需要以其他方式解決。</span></span></p>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span><em><span>使用至少一個列表理解</span></em></span><s><span><span>語句在一行Python中</span></span></s><span> </span><span><span>編寫</span><span>。</span><span>（</span><em><span>提示：記住</span></em><em><span>練習7中的</span></em><em><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span>列表理解</span></a></em><span>）。</span></span><em><span></span></em><span></span><em><span></span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span></span></a><span></span></em><span></span></p>
<p><em><span><span>此練習的原始表述是使用一行Python編寫解決方案，但是一些讀者指出，如果不使用</span></span><code class="highlighter-rouge">set</code><span><span>我尚未在博客上討論過的s，</span><span>則不可能做到這一點</span><span>，因此您可以選擇使用原始指令，並閱讀</span></span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><code class="highlighter-rouge">set</code><span><span>Python 3.3中</span></span></a><span><span>的</span><a href="https://docs.python.org/3.3/library/stdtypes.html?highlight=set#set"><span>命令</span></a><span>，或者嘗試自己實現該</span><span>指令並</span><span>在解決方案中至少使用一個列表理解。</span></span></em></p>
<p><span><span>額外：</span></span></p>
<ul>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<span><span>討論區</span></span>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>清單理解</span></span></li>
<li><span><span>隨機數，續</span></span></li>
</ul>
<span><span>清單理解</span></span>
<p><span><span>我們已經在</span></span><a href="http://practicepython.blogspot.com/2014/03/exercise-7-list-comprehensions.html"><span><span>練習7中</span></span></a><span><span>討論了列表理解</span><span>，但是可以使它們複雜得多。</span></span></p>
<p><span><span>例如：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">allproducts</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>在這段代碼的最後，</span></span><code class="highlighter-rouge">allproducts</code><span><span>將包含list<span> </span></span></span><code class="highlighter-rouge">[5, 10, 15, 10, 20, 30, 15, 30, 45]</code><span><span>。</span><span>因此，您可以在理解中放入多個for循環。</span><span>但是您還可以添加更複雜的條件：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
	<span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>
	<span class="n">customlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="n">b</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">x</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">y</span> <span class="k">if</span> <span class="n">a</span><span class="o">*</span><span class="n">b</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>現在</span></span><code class="highlighter-rouge">customlist</code><span><span>包含，</span></span><code class="highlighter-rouge">[5, 15, 15, 45]</code><span><span>因為僅將奇數產品添加到列表中。</span></span></p>
<p><span><span>通常，列表理解採用以下形式：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="p">[</span><span class="n">EXPRESSION</span> <span class="n">FOR_LOOPS</span> <span class="n">CONDITIONALS</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>如以上示例所示。</span></span></p>
<span><span>隨機數，續</span></span>
<p><span><span>嘗試使用</span></span><a href="https://docs.python.org/3.0/library/random.html"><span><span>Python隨機文檔</span></span></a><span><span>來弄清楚如何生成隨機列表。</span><span>提示如下：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span></code></pre>
</figure>
<p><span><span>這行代碼將</span></span><code class="highlighter-rouge">a</code><span><span>包含從0到99的5個隨機數的列表。</span></span></p>
<div id="tipue_search_content">
<h3>P11</h3>
check primality functions<br/>Exercise 11 (and<span> </span><a href="https://www.practicepython.org/solution/2014/04/16/11-check-primality-functions-solutions.html">Solution</a>)
<p>Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to<span> </span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html">Exercise 4</a><span> </span>to help you. Take this opportunity to practice using functions, described below.</p>
Discussion
<p>Concepts for this week:</p>
<ul>
<li>Functions</li>
<li>Reusable functions</li>
<li>Default arguments</li>
</ul>
Functions
<p>One of the tools programming gives us is the ability to break down problems into easier (or perhaps previously solved) or reusable subproblems. It is good practice to have a function have a single purpose, and the name of that function should hint at it’s purpose in some way.</p>
<p>Most programming languages have this idea of a function, subroutine, or subprogram. In Python, a function is a programming construct that allows exactly that.</p>
<p>Let’s look at a simple example:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span></code></pre>
</figure>
<p>In this small example, we used the same code that asks a user for input as a tabbed line underneath this<span> </span><code class="highlighter-rouge">def</code><span> </span>statement. The<span> </span><code class="highlighter-rouge">def</code><span> </span>means that everything tabbed underneath is a function. The name<span> </span><code class="highlighter-rouge">get_integer()</code><span> </span>is just a name that I (the programmer) made up. If I just include this code inside a Python file and run it, nothing will happen - all I have done so far is wrapped my code inside of a function; I never told my program to actually RUN my function.</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span>

  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p>What I have done here is<span> </span><em>called</em><span> </span>the function (told it to run) by writing<span> </span><code class="highlighter-rouge">age = get_integer()</code>. When this line of code runs, what happens is the program will<span> </span><em>execute</em><span> </span>(run) the function by asking me for a number, then<span> </span><em>returning</em><span> </span>it (giving it back to me) by saving it inside the variable<span> </span><code class="highlighter-rouge">age</code>. Now when I want to ask the user for another number (this time representing the school year), I do the same thing with the variable<span> </span><code class="highlighter-rouge">school_year</code>.</p>
Reusable functions
<p>This is all well and good, but I can make my function do much more for me. Right now, my function will always ask the user for a number by printing the string<span> </span><code class="highlighter-rouge">"Give me a number: "</code>. What if I want to print a different string every time I ask the user for a number, but otherwise use the same idea for the function? In other words, I want a variable parameter in my function that changes every time I call the function based on something I (the programmer) want to be different.</p>
<p>I can do this by<span> </span><em>passing</em><span> </span>(giving) my function a variable. Like this:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p>Now what I can do when I call the function is something like this:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span>

  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"What grade are you in? "</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p>Now it is easier for a user to use the program, because the help text is different.</p>
<p>These variables you pass to functions are called<span> </span><em>variables</em>,<span> </span><em>parameters</em>, or<span> </span><em>arguments</em>.</p>
Default arguments
<p>In the example above, once I have added an<span> </span><em>argument</em><span> </span>to my function, I always have to give an argument when I call the function. I can’t forget to give the<span> </span><code class="highlighter-rouge">get_integer()</code><span> </span>function from above a string to print to the screen. In some cases, I want there to be a “default” behavior for my function that happens when I create an argument for it but don’t give it any.</p>
<p>In the example above, if I don’t give a custom string (which may be 95% of the time I use this function), I just want the<span> </span><code class="highlighter-rouge">input()</code><span> </span>line to say<span> </span><code class="highlighter-rouge">"Give me a number: "</code><span> </span>and I want to save myself the trouble of writing this every single time I call the function. So what I can do is give my function<span> </span><em>default arguments</em>. Like so:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p>What happens now is I can use the function in two ways: by giving it an argument and by NOT giving it an argument.</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span>

  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p>The first time I call the function, it will print<span> </span><code class="highlighter-rouge">"Tell me your age: "</code>, but the second time, it will print<span> </span><code class="highlighter-rouge">"Give me a number: "</code>, because I did not give it a string and it will execute the default behavior.</p>
Recap
<p>What a function does is wrap a piece of code that we want to reuse, labels it, and allows us to use it again relatively easily. You can add variables to the functions to make your code even MORE reusable, and you can add default arguments to these variables.</p>
<p>Functions are a bit strange to deal with at first, but once you master them, they will be your savior in programming. Besides, the whole point of learning programming is abstraction, problem solving, breaking down problems, and that’s exactly what functions are all about.</p>
檢查基本功能</div>
<div class="activitywrap purpose learnbydoing flash"><span></span><span><span>練習11（和</span></span><a href="https://www.practicepython.org/solution/2014/04/16/11-check-primality-functions-solutions.html"><span><span>解決方案</span></span></a><span><span>）</span></span>
<p><span><span>向用戶詢問一個數字，並確定該數字是否為質數。</span><span>（對於那些忘記的人，質數是沒有除數的數。）</span><span>您可以（並且應該！）使用</span></span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html"><span><span>練習4</span></span></a><span><span>的答案</span><span>來幫助您。</span><span>藉此機會練習使用如下所述的功能。</span></span></p>
<span><span>討論區</span></span>
<p><span><span>本週的概念：</span></span></p>
<ul>
<li><span><span>職能</span></span></li>
<li><span><span>可重用功能</span></span></li>
<li><span><span>默認參數</span></span></li>
<li>職能</li>
</ul>
<p><span><span>編程提供給我們的工具之一是能夠將問題分解為更簡單（或可能先前解決）或可重用的子問題。</span><span>優良作法是使一個函數具有單一目的，並且該函數的名稱應以某種方式暗示其目的。</span></span></p>
<p><span><span>大多數編程語言都具有函數，子例程或子程序的概念。</span><span>在Python中，函數是一種允許這樣做的編程構造。</span></span></p>
<p><span><span>讓我們看一個簡單的例子：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>在這個小示例中，我們使用了相同的代碼來要求用戶輸入此</span></span><code class="highlighter-rouge">def</code><span><span>語句</span><span>下方的選項卡行</span><span>。</span><span>的</span></span><code class="highlighter-rouge">def</code><span><span>手段，一切選項卡式下面是一個函數。</span><span>這個名字</span></span><code class="highlighter-rouge">get_integer()</code><span><span>只是我（程序員）組成的名字。</span><span>如果我只是將此代碼包含在Python文件中並運行它，則將不會發生任何事情-到目前為止，我所做的一切都將我的代碼包裝在一個函數中；</span><span>我從未告訴過我的程序實際運行我的功能。</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">():</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Give me a number: "</span><span class="p">))</span><span></span>
<span></span>
  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>我在這裡所做的事情</span><span>通過編寫</span></span><em><span><span>稱為</span></span></em><span><span>函數（告訴它運行）</span></span><code class="highlighter-rouge">age = get_integer()</code><span><span>。</span><span>當這行代碼運行時，程序將</span><span>通過詢問我一個數字</span><span>來</span></span><em><span><span>執行</span></span></em><span><span>（運行）該函數，然後</span></span><em><span><span>將</span></span></em><span><span>其保存在變量中以將其</span><em><span>返回</span></em><span>（返還給我）</span></span><code class="highlighter-rouge">age</code><span><span>。</span><span>現在，當我想問用戶另一個數字（這次代表學年）時，我對變量做了同樣的事情</span></span><code class="highlighter-rouge">school_year</code><span><span>。</span></span></p>
<span><span>可重用功能</span></span>
<p><span><span>這一切都很好，但是我可以讓我的功能為我做更多的事情。</span><span>現在，我的函數將始終通過打印字符串向用戶詢問一個數字</span></span><code class="highlighter-rouge">"Give me a number: "</code><span><span>。</span><span>如果我想每次問用戶一個數字時都想打印一個不同的字符串，但對於該函數使用相同的想法怎麼辦？</span><span>換句話說，我希望函數中的變量參數在每次調用函數時都根據我（程序員）希望與眾不同的事物而改變。</span></span></p>
<p><span><span>我可以通過</span></span><em><span><span>傳遞</span></span></em><span><span>（給我的）函數一個變量</span><span>來做到這一點</span><span>。</span><span>像這樣：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>現在，我在調用該函數時可以執行的操作如下：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span><span></span>
<span></span>
  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"What grade are you in? "</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>現在，由於幫助文本不同，因此使用戶更容易使用該程序。</span></span></p>
<p><span><span>傳遞給函數的這些變量稱為</span></span><em><span><span>變量</span></span></em><span><span>，</span></span><em><span><span>參數</span></span></em><span><span>或</span></span><em><span><span>參數</span></span></em><span><span>。</span></span></p>
<span><span>默認參數</span></span>
<p><span><span>在上面的示例中，在</span><span>向函數</span><span>添加</span></span><em><span><span>參數後</span></span></em><span><span>，在調用函數時始終必須提供參數。</span><span>我不能忘記</span></span><code class="highlighter-rouge">get_integer()</code><span><span>從字符串上方</span><span>給</span><span>函數打印到屏幕上。</span><span>在某些情況下，我希望函數有一種“默認”行為，這種行為會在為它創建參數但不給出任何參數時發生。</span></span></p>
<p><span><span>在上面的示例中，如果我不提供自定義字符串（可能占我使用此函數的時間的95％），我只想讓</span></span><code class="highlighter-rouge">input()</code><span><span>行說出來，</span></span><code class="highlighter-rouge">"Give me a number: "</code><span><span>並且省去了每次編寫此</span><span>字符串</span><span>的麻煩我稱這個功能。</span><span>所以我能做的就是給我的函數</span></span><em><span><span>默認參數</span></span></em><span><span>。</span><span>像這樣：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>現在發生的事情是我可以通過兩種方式使用該函數：通過給它一個參數和不給它一個參數。</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">  <span class="k">def</span> <span class="nf">get_integer</span><span class="p">(</span><span class="n">help_text</span><span class="o">=</span><span class="s">"Give me a number: "</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="n">help_text</span><span class="p">))</span><span></span>
<span></span>
  <span class="n">age</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">(</span><span class="s">"Tell me your age: "</span><span class="p">)</span>
  <span class="n">school_year</span> <span class="o">=</span> <span class="n">get_integer</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">15</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"You are over the age of 15"</span><span class="p">)</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"You are in grade "</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">school_year</span><span class="p">))</span></code></pre>
</figure>
<p><span><span>第一次調用該函數，它將打印</span></span><code class="highlighter-rouge">"Tell me your age: "</code><span><span>，但是第二次，它將打印</span></span><code class="highlighter-rouge">"Give me a number: "</code><span><span>，因為我沒有給它一個字符串，它將執行默認行為。</span></span></p>
<div id="tipue_search_content">
<h3>P12</h3>
<span>List ends</span></div>
<div class="activitywrap purpose learnbydoing flash">Exercise 12 (and<span> </span><a href="https://www.practicepython.org/solution/2014/05/15/12-list-ends-solutions.html">Solution</a>)
<p>Write a program that takes a list of numbers (for example,<span> </span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code>) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.</p>
Concepts to practice
<ul>
<li>Lists and properties of lists</li>
<li>List comprehensions (maybe)</li>
<li>Functions</li>
</ul>
<span><span></span></span></div>
<h4 class="activitywrap purpose learnbydoing flash"><span><span>清單結尾</span></span></h4>
<div class="activitywrap purpose learnbydoing flash"><span><span>練習12（和</span></span><a href="https://www.practicepython.org/solution/2014/05/15/12-list-ends-solutions.html"><span><span>解決方案</span></span></a><span><span>）</span></span></div>
<div class="activitywrap purpose learnbydoing flash">
<p><span><span>編寫一個程序，該程序接受一個數字列表（例如</span></span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code><span><span>），並製作一個僅包含給定列表的第一個和最後一個元素的新列表。</span><span>為了練習，請在函數內編寫此代碼。</span></span></p>
<span><span>練習概念</span></span>
<ul>
<li><span><span>列表和列表屬性</span></span></li>
<li><span><span>列表理解（也許）</span></span></li>
<li><span><span>職能</span></span><span><span></span></span></li>
<li>List Overlap Comprehensions Solutions<span></span><br/><i></i>P10 AII solutions<span> </span><a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html"></a><a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html">Exercise 10</a>
<p>This week’s exercise is going to be revisiting an old exercise (see<span> </span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a>), except require the solution in a different way.</p>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this<span> </span><em>using at least one list comprehension</em>. (<em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em>).</p>
<p>Extra:</p>
<ul>
<li>Randomly generate two lists to test this</li>
</ul>
Sample solution
<p>A user-submitted solution:</p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1">import random</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3">a = random.sample(range(1,30), 12)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4">b = random.sample(range(1,30), 16)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5">result = [i for i in a if i in b]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010">view raw</a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10">Exercise 10</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>As a few commenters / readers of this blog have pointed out (thanks mainly to Gautam and Jeff), the exercise as posed is actually impossible to write in a single line of Python. The problem is this: the proposed reader solution (and the solution that I had in mind myself) as written above does not take into account the fact that there might be duplicates in the resulting list, where I specifically asked to not include duplicates. This means that in the simple example I gave above,<span> </span><code class="highlighter-rouge">a</code>’s first element is<span> </span><code class="highlighter-rouge">1</code><span> </span>will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list because it is in<span> </span><code class="highlighter-rouge">b</code>. But then it’s next element is also<span> </span><code class="highlighter-rouge">1</code>, and is also in<span> </span><code class="highlighter-rouge">b</code>, so will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list. So the solution as given (the comprehension<span> </span><code class="highlighter-rouge">[i for i in a if i in b]</code>) will not yield the correct result on the example solution.</p>
<p>Instead, as pointed out by Gautam and Jeff, the simplest way to achieve this solution would be to make sure that we are only looking at unique elements from<span> </span><code class="highlighter-rouge">a</code>, the first list in the comprehension. We have not discussed doing this easily in Python on this blog using the<span> </span><code class="highlighter-rouge">set</code><span> </span>built-in function, but if you know it, the solution will look like this:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1">b</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1">result</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">set</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">b</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py">list-overlap-comprehensions.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>But, to achieve the same results as asked in the original question while still using a list comprehension (however, definitely not using a single line of code), would be to make sure that there is no overlap in the new list after it is constructed, using the traditional<span> </span><code class="highlighter-rouge">for</code><span> </span>loop on lists:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1">b</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1">result_overlap</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">set</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1">result</span><span> </span><span class="pl-c1">=</span><span> </span>[]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k">for</span><span> </span><span class="pl-s1">element</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">result_overlap</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k">if</span><span> </span><span class="pl-s1">element</span><span> </span><span class="pl-c1">not</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">result</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1">result</span>.<span class="pl-en">appent</span>(<span class="pl-s1">element</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py">list-overlap-comprehensions-for.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>Or, to practice list comprehensions again, this can be done with two list comprehensions:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1">b</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1">result_overlaps</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">set</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1">result</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">result_overlaps</span><span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">result_overlaps</span>.<span class="pl-en">count</span>(<span class="pl-s1">i</span>)<span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">1</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py">view raw</a></div>
<div class="gist-meta">
<p><span>本週的練習將重溫舊的練習（請參閱</span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span>練習5</span></a><span>），只是需要以其他方式解決。</span></p>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span></span><em><span><span>至少使用一個列表理解來</span></span></em><span><span>寫這個</span><span>。</span><span>（</span></span><em><span><span>提示：記住</span><span>練習7中的</span></span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span><span>列表理解</span></span></a><span></span></em><span><span>）。</span></span></p>
<p><span><span>額外：</span></span></p>
<ul>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<span><span>樣品溶液</span></span>
<p><span><span>用戶提交的解決方案：</span></span></p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1"><span><span>隨機導入</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3"><span><span>一個= random.sample（range（1,30），12）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4"><span><span>b = random.sample（範圍（1,30），16）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5"><span><span>結果= [如果b中有i，則a中的i代表i]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010"><span><span>查看原始</span></span></a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10"><span><span>練習10</span></span></a><span><span><span> </span>由</span></span><a href="https://github.com/"><span><span>GitHub託管</span></span></a></div>
</div>
</div>
<p><span><span>正如該博客的一些評論者/讀者所指出的（主要感謝Gautam和Jeff），所提出的練習實際上不可能用Python編寫。</span><span>問題是這樣的：上面寫的建議的閱讀器解決方案（以及我自己想到的解決方案）沒有考慮到結果列表中可能存在重複項的事實，我特別要求不要包含重複項。</span><span>這意味著在我上面給出的簡單示例中，</span></span><code class="highlighter-rouge">a</code><span><span>第一個元素</span></span><code class="highlighter-rouge">1</code><span><span>將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中，因為它在中</span></span><code class="highlighter-rouge">b</code><span><span>。</span><span>但隨後它的下一個元素也是</span></span><code class="highlighter-rouge">1</code><span><span>，並且也在</span></span><code class="highlighter-rouge">b</code><span><span>，因此將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中。</span><span>因此，給定的解決方案（comprehension<span> </span></span></span><code class="highlighter-rouge">[i for i in a if i in b]</code><span><span>）將無法在示例解決方案上產生正確的結果。</span></span></p>
<p><span><span>相反，正如Gautam和Jeff所指出的那樣，實現此解決方案的最簡單方法是確保僅查看來自</span></span><code class="highlighter-rouge">a</code><span><span>理解中第一個列表的</span><span>唯一元素</span><span>。</span><span>我們沒有在此博客上使用</span></span><code class="highlighter-rouge">set</code><span><span>內置函數</span><span>討論在Python中輕鬆實現此操作的</span><span>方法，但是如果您知道，解決方案將如下所示：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k"><span></span></span><span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1"><span><span>b<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1"><span><span>導致</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>b</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py"><span><span>list-overlap-comprehensions.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>但是，要在仍然使用列表理解的情況下達到與原始問題相同的結果（但是，絕對不要使用一行代碼），將確保新列表在構建後沒有重疊，使用</span></span><code class="highlighter-rouge">for</code><span><span>列表上</span><span>的傳統</span><span>循環：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k"><span></span></span><span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1"><span><span>b<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1"><span><span>result_overlap<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>b</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1"><span><span>結果</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k"><span><span>對於</span></span></span><span> </span><span class="pl-s1"><span><span>元件</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>result_overlap</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>要素</span></span></span><span> </span><span class="pl-c1"><span><span>不能</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>結果</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1"><span><span>結果</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>出現</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>元素</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py"><span><span>list-overlap-comprehensions-for.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>或者，要再次練習列表推導，可以使用兩個列表推導來完成：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k"><span></span></span><span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1"><span><span>b<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1"><span><span>result_overlaps<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>b</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1"><span><span>導致</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>result_overlaps</span></span></span><span> </span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>result_overlaps</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>數</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>i</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</li>
</ul>
</div>
</div>
</div>
<h2>H3(All Solutions)</h2>
<h3>P1</h3>
<p>CHARACTER IN PUT SOLUTION</p>
<div><i></i></div>
<p>Because I cannot include every single submission I get, I will choose one or two that are example answers and include those within each post.</p>
<p><strong>EXERCISE 1</strong></p>
<p>Create a program that asks the user to enter their name and their age. Print out a message addressed to them that tells them the year that they will turn 100 years old.</p>
<p><strong>輸入解決方案</strong></p>
<p><span><span>由於我無法將收到的每份意見書都包括在內，因此我將選擇一個或兩個作為示例答案，並在每個帖子中包括這些答案。</span></span></p>
<p><strong>練習1</strong></p>
<p><span><span>創建一個程序，要求用戶輸入他們的姓名和年齡。</span><span>打印給他們的消息，告訴他們他們將滿100歲的年份。</span></span></p>
<h3>P2</h3>
<p><strong>ODD OR EVEN SOLUTIONS</strong></p>
<p><strong>EXERCISES 2</strong></p>
<p>Ask the user for a number. Depending on whether the number is even or odd, print out an appropriate message to the user.</p>
<p><em>Hint: how does an even / odd number react differently when divided by 2?</em></p>
<p>Extras:</p>
<ol>
<li>If the number is a multiple of 4, print out a different message.</li>
<li>Ask the user for two numbers: one number to check (call it<span> </span><code class="highlighter-rouge">num</code>) and one number to divide by (<code class="highlighter-rouge">check</code>). If<span> </span><code class="highlighter-rouge">check</code><span> </span>divides evenly into<span> </span><code class="highlighter-rouge">num</code>, tell that to the user. If not, print a different appropriate message.</li>
</ol>
<p>SAMPLE SOLUTION</p>
<p>There are many ways of doing the exercise, so I am posting a few sample solutions. The very basics:</p>
<div class="gist" id="gist8838738">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-02">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-02-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC1">num = input("Enter a number: ")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-02-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC2">mod = num % 2</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-02-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC3">if mod &gt; 0:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-02-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC4">print("You picked an odd number.")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-02-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC5">else:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-02-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC6">print("You picked an even number.")</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/8838738/raw/93c6445ce316897938f6ed990602951ac8368bae/02">view raw</a><a href="https://gist.github.com/anonymous/8838738#file-02">02</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>And something that looks slightly more complex (but is just a more complicated conditional):</p>
<div class="gist" id="gist8911985">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-txt">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-txt-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC1">num = int(input("give me a number to check: "))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-txt-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC2">check = int(input("give me a number to divide by: "))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-txt-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC3"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-txt-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC4">if num % 4 == 0:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-txt-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC5">print(num, "is a multiple of 4")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-txt-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC6">elif num % 2 == 0:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-txt-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC7">print(num, "is an even number")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-txt-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC8">else:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-gistfile1-txt-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC9">print(num, "is an odd number")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-gistfile1-txt-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC10"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-gistfile1-txt-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC11">if num % check == 0:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-gistfile1-txt-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC12">print(num, "divides evenly by", check)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-gistfile1-txt-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC13">else:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-gistfile1-txt-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC14">print(num, "does not divide evenly by", check)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<p><strong>基數或偶數解</strong></p>
<p><strong>練習2</strong></p>
<p><span><span>詢問用戶一個數字。</span><span>根據數字是偶數還是奇數，向用戶打印一條適當的消息。</span></span></p>
<p><em><span><span>提示：偶數/奇數除以2時的反應如何？</span></span></em></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>如果數字是4的倍數，請打印出另一條消息。</span></span></li>
<li><span><span>向用戶詢問兩個數字：一個數字要檢查（稱為</span></span><code class="highlighter-rouge">num</code><span><span>），另一個數字要除以（</span></span><code class="highlighter-rouge">check</code><span><span>）。</span><span>如果</span></span><code class="highlighter-rouge">check</code><span><span>平均分為</span></span><code class="highlighter-rouge">num</code><span><span>，請告知用戶。</span><span>如果不是，請打印其他適當的消息。</span></span><span><span></span></span></li>
</ol>
<p><strong>樣品</strong></p>
<p><span><span>進行練習的方法有很多，因此我將發布一些示例解決方案。</span><span>基本知識：</span></span></p>
<div class="gist" id="gist8838738">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-02">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-02-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC1"><span><span>num = input（“輸入數字：”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-02-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC2"><span><span>mod = num％2</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-02-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC3"><span><span>如果mod&gt; 0：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-02-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC4"><span><span> 打印（“您選擇了一個奇數。”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-02-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC5"><span><span>其他：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-02-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-02-LC6"><span><span> 打印（“您選擇了一個偶數。”）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/8838738/raw/93c6445ce316897938f6ed990602951ac8368bae/02"><span><span>查看原始</span></span></a><a href="https://gist.github.com/anonymous/8838738#file-02"><span><span>02</span></span></a><span><span><span> </span>通過託管與❤<span> </span></span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>看起來稍微複雜一些（但只是條件更複雜）：</span></span></p>
<div class="gist" id="gist8911985">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-txt">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-txt-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC1"><span><span>num = int（input（“給我一個要檢查的數字：”））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-txt-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC2"><span><span>check = int（input（“給我一個數字除以：”））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-txt-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC3"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-txt-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC4"><span><span>如果num％4 == 0：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-txt-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC5"><span><span> print（num，“是4的倍數”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-txt-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC6"><span><span>elif num％2 == 0：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-txt-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC7"><span><span> 打印（數字，“是偶數”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-txt-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC8"><span><span>其他：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-gistfile1-txt-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC9"><span><span> print（num，“是一個奇數”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-gistfile1-txt-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC10"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-gistfile1-txt-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC11"><span><span>如果num％check == 0：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-gistfile1-txt-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC12"><span><span> 打印（數字，“均分”，選中）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-gistfile1-txt-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC13"><span><span>其他：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-gistfile1-txt-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC14"><span><span> 打印（數字，“不均勻地除以”，檢查）</span></span></td>
</tr>
</tbody>
</table>
<h3>P3</h3>
<p><strong>LIST LESS THAN SOLUTIONS TEN</strong></p>
<p><strong>EXERCISE</strong></p>
<p>Take a list, say for example this one:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that prints out all the elements of the list that are less than 5.</p>
<p>Extras:</p>
<ol>
<li>Instead of printing the elements one by one, make a new list that has all the elements less than 5 from this list in it and print out this new list.</li>
<li>Write this in one line of Python.</li>
<li>Ask the user for a number and return a list that contains only elements from the original list<span> </span><code class="highlighter-rouge">a</code><span> </span>that are smaller than that number given by the user.</li>
</ol>
<p><strong>SAMPALE SOLUTION</strong></p>
<p>I will note that none of the solutions that were submitted were written in one line of Python. There will be more exercises later that show you how to do this!</p>
<p>Here is a sample solution that solves the exercise, including extras 1 and 3.</p>
<p><strong>列出少於10個解決方案</strong></p>
<p><strong>練習3</strong></p>
<p><span><span>拿一個清單，例如說一個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，打印出列表中小於5的所有元素。</span></span></p>
<p><span><span>附加功能：</span></span></p>
<ol>
<li><span><span>而不是一個一個地打印元素，而是創建一個新列表，其中該列表中的所有元素少於5個，然後打印出該新列表。</span></span></li>
<li><span><span>用一行Python編寫。</span></span></li>
<li><span><span>向用戶詢問一個數字，然後返回一個列表，該列表僅包含原始列表</span></span><code class="highlighter-rouge">a</code><span><span>中小於用戶給定數字的</span><span>元素</span><span>。</span></span></li>
</ol>
<p><strong>樣品</strong></p>
<p><span><span>溶液</span></span><span><span>我將注意到，提交的解決方案都不是用Python的一行編寫的。</span><span>稍後會有更多練習向您展示如何執行此操作！</span></span></p>
<p><span><span>這是解決該練習的示例解決方案，包括附加功能1和3。</span></span></p>
<h3>P4</h3>
<p><strong>EXERCISE 4</strong></p>
<p><strong>SAMPALE SOLUTION</strong></p>
<p>Create a program that asks the user for a number and then prints out a list of all the divisors of that number. (If you don’t know what a<span> </span><em>divisor</em><span> </span>is, it is a number that divides evenly into another number. For example, 13 is a divisor of 26 because 26 / 13 has no remainder.)</p>
<p></p>
<div class="gist" id="gist9269773">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-practice-python-excersise-4-divisors">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-practice-python-excersise-4-divisors-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC1">__author__ = 'jeffreyhunt'</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-practice-python-excersise-4-divisors-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-practice-python-excersise-4-divisors-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC3">num = int(input("Please choose a number to divide: "))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-practice-python-excersise-4-divisors-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC4"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-practice-python-excersise-4-divisors-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC5">listRange = list(range(1,num+1))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-practice-python-excersise-4-divisors-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC6"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-practice-python-excersise-4-divisors-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC7">divisorList = []</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-practice-python-excersise-4-divisors-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC8"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-practice-python-excersise-4-divisors-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC9">for number in listRange:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-practice-python-excersise-4-divisors-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC10">if num % number == 0:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-practice-python-excersise-4-divisors-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC11">divisorList.append(number)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-practice-python-excersise-4-divisors-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC12"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-practice-python-excersise-4-divisors-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC13">print(divisorList)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/jeffhunt/9269773/raw/29cd4515ddb89cd5b1440597625cf41e3d3ee957/Practice%20Python%20-%20Excersise%204:%20Divisors">view raw</a><a href="https://gist.github.com/jeffhunt/9269773#file-practice-python-excersise-4-divisors">Practice Python - Excersise 4: Divisors</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>There were a number of tricky things with this exercise. First, the type conversions between input strings and integers for the<span> </span><code class="highlighter-rouge">range()</code><span> </span>function need to be carefully output. Second, the arguments to<span> </span><code class="highlighter-rouge">range()</code><span> </span>had to be carefully constructed to cover all the possible numbers. Third, the condition in the<span> </span><code class="highlighter-rouge">if</code><span> </span>statement had to be correct as well.</p>
<p><strong>除數解決方案</strong></p>
<p><strong>練習4</strong></p>
<span></span>
<p><span><span>數解決方案</span></span><span><span>創建一個程序，詢問用戶一個數字，然後打印出該數字的所有除數的列表。</span><span>（如果您不知道</span></span><em><span><span>除數</span></span></em><span><span>是多少，它是一個平均除以另一個數的數字。例如，13是26的除數，因為26/13沒有餘數。）</span></span></p>
<p><strong>樣品</strong></p>
<div class="gist" id="gist9269773">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-practice-python-excersise-4-divisors">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-practice-python-excersise-4-divisors-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC1"><span><span>__author__ ='jeffreyhunt'</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-practice-python-excersise-4-divisors-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-practice-python-excersise-4-divisors-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC3"><span><span>num = int（input（“請選擇一個要除的數字：”））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-practice-python-excersise-4-divisors-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC4"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-practice-python-excersise-4-divisors-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC5"><span><span>listRange = list（範圍（1，num + 1））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-practice-python-excersise-4-divisors-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC6"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-practice-python-excersise-4-divisors-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC7"><span><span>divisorList = []</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-practice-python-excersise-4-divisors-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC8"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-practice-python-excersise-4-divisors-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC9"><span><span>用於listRange中的數字：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-practice-python-excersise-4-divisors-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC10"><span><span> 如果num％number == 0：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-practice-python-excersise-4-divisors-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC11"><span><span> divisorList.append（number）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-practice-python-excersise-4-divisors-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC12"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-practice-python-excersise-4-divisors-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-practice-python-excersise-4-divisors-LC13"><span><span>打印（divisorList）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/jeffhunt/9269773/raw/29cd4515ddb89cd5b1440597625cf41e3d3ee957/Practice%20Python%20-%20Excersise%204:%20Divisors"><span><span>查看原始</span></span></a><a href="https://gist.github.com/jeffhunt/9269773#file-practice-python-excersise-4-divisors"><span><span>實踐Python的- Excersise 4：除數</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>這項練習有很多棘手的事情。</span><span>首先，</span></span><code class="highlighter-rouge">range()</code><span><span>需要仔細輸出函數的</span><span>輸入字符串和整數之間的類型轉換</span><span>。</span><span>其次，</span></span><code class="highlighter-rouge">range()</code><span><span>必須仔細構造</span><span>論據以</span><span>涵蓋所有可能的數字。</span><span>第三，</span></span><code class="highlighter-rouge">if</code><span><span>聲明中</span><span>的條件</span><span>也必須正確。</span></span></p>
<h3>P5</h3>
<p><span><span>LIST OVERLAP SOLUTIONS</span></span></p>
</div>
</div>
</div>
</div>
</div>
</div>
<div>EXERCISE 5<i></i></div>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes.</p>
<p><strong>列表重疊解決方案</strong></p>
<div><strong>練習5</strong><i></i></div>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span></span></p>
<h3>P6</h3>
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-stringlists-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<p><strong>STRING LIST SOLUTIONS</strong></p>
</div>
</div>
</div>
</div>
<div class="gist-meta"><strong></strong>
<div><strong>EXCERCISE5</strong><i></i></div>
<p>Ask the user for a string and print out whether this string is a palindrome or not. (A<span> </span><strong>palindrome</strong><span> </span>is a string that reads the same forwards and backwards.)</p>
<p><strong>SAMPLE SOLUTIONS</strong></p>
<div class="gist" id="gist9587781">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-palinfrome-test">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-palinfrome-test-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC1">wrd=input("Please enter a word")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-palinfrome-test-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC2">wrd=str(wrd)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-palinfrome-test-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC3">rvs=wrd[::-1]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-palinfrome-test-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC4">print(rvs)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-palinfrome-test-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC5">if wrd == rvs:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-palinfrome-test-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC6">print("This word is a palindrome")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-palinfrome-test-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC7">else:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-palinfrome-test-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC8">print("This word is not a palindrome")</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/9587781/raw/f83c89024001d949aabd78ee50681ff75d39b1f0/Palinfrome%20Test!">view raw</a><a href="https://gist.github.com/anonymous/9587781#file-palinfrome-test">Palinfrome Test!</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<div class="gist" id="gist17590268">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-stringlists-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-stringlists-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC1"><span class="pl-k">def</span> <span class="pl-en">reverse</span>(<span class="pl-s1">word</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-stringlists-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC2"><span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-s">''</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-stringlists-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC3"><span class="pl-k">for</span> <span class="pl-s1">i</span> <span class="pl-c1">in</span> <span class="pl-en">range</span>(<span class="pl-en">len</span>(<span class="pl-s1">word</span>)):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-stringlists-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC4"><span class="pl-s1">x</span> <span class="pl-c1">+=</span> <span class="pl-s1">word</span>[<span class="pl-en">len</span>(<span class="pl-s1">word</span>)<span class="pl-c1">-</span><span class="pl-c1">1</span><span class="pl-c1">-</span><span class="pl-s1">i</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-stringlists-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC5"><span class="pl-k">return</span> <span class="pl-s1">x</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-stringlists-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC6"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-stringlists-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC7"><span class="pl-s1">word</span> <span class="pl-c1">=</span> <span class="pl-en">input</span>(<span class="pl-s">'give me a word:<span class="pl-cce">\n</span>'</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-stringlists-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC8"><span class="pl-s1">x</span> <span class="pl-c1">=</span> <span class="pl-en">reverse</span>(<span class="pl-s1">word</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-stringlists-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC9"><span class="pl-k">if</span> <span class="pl-s1">x</span> <span class="pl-c1">==</span> <span class="pl-s1">word</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-stringlists-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC10"><span class="pl-en">print</span>(<span class="pl-s">'This is a Palindrome'</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-stringlists-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC11"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-stringlists-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC12"><span class="pl-en">print</span>(<span class="pl-s">'This is NOT a Palindrome'</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<p><strong>字串列表解決方案</strong></p>
<div><strong>練習6</strong><i></i></div>
<p><span><span>向用戶詢問一個字符串，然後打印出該字符串是否是回文。</span><span>（</span></span><strong><span><span>回文</span></span></strong><span><span>是指向前和向後讀取相同字符串的字符串。）</span></span></p>
<p><strong>樣品</strong></p>
<div class="gist" id="gist9587781">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-palinfrome-test">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-palinfrome-test-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC1"><span><span>wrd = input（“請輸入一個單詞”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-palinfrome-test-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC2"><span><span>wrd = str（wrd）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-palinfrome-test-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC3"><span><span>rvs = wrd [::-1]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-palinfrome-test-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC4"><span><span>打印（rvs）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-palinfrome-test-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC5"><span><span>如果wrd == rvs：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-palinfrome-test-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC6"><span><span> 打印（“這個詞是回文”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-palinfrome-test-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC7"><span><span>其他：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-palinfrome-test-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-palinfrome-test-LC8"><span><span> 打印（“此詞不是回文”）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/9587781/raw/f83c89024001d949aabd78ee50681ff75d39b1f0/Palinfrome%20Test!"><span><span>查看原始</span></span></a><a href="https://gist.github.com/anonymous/9587781#file-palinfrome-test"><span><span>Palinfrome測試！</span></span></a><span><span><span> </span>由</span><a href="https://github.com/"><span>GitHub</span></a><span>託管於❤</span></span></div>
</div>
</div>
<div class="gist" id="gist17590268">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-stringlists-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-stringlists-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC1"><span class="pl-k"><span><span>def</span></span></span> <span class="pl-en"><span><span>反向</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>單詞</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-stringlists-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC2"><span class="pl-s1"><span><span>x </span></span></span> <span class="pl-c1"><span><span>= </span></span></span> <span class="pl-s"><span><span>''</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-stringlists-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC3"><span class="pl-k"><span><span>對於</span></span></span> <span class="pl-s1"><span><span>我</span></span></span> <span class="pl-c1"><span><span>在</span></span></span> <span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>len個</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>字</span></span></span><span><span>））：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-stringlists-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC4"><span class="pl-s1"><span><span>X </span></span></span> <span class="pl-c1"><span><span>+ =</span></span></span> <span class="pl-s1"><span><span>字</span></span></span><span><span>[ </span></span><span class="pl-en"><span><span>len個</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>字</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>- </span></span></span><span class="pl-c1"><span><span>1 </span></span></span><span class="pl-c1"><span><span>-</span></span></span><span class="pl-s1"><span><span>我</span></span></span><span><span>]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-stringlists-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC5"><span class="pl-k"><span><span>返回</span></span></span> <span class="pl-s1"><span><span>x</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-stringlists-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC6"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-stringlists-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC7"><span class="pl-s1"><span><span>單詞</span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-en"><span><span>輸入</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“給我一個單詞：</span></span><span class="pl-cce"><span><span>\ n</span></span></span><span><span> ”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-stringlists-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC8"><span class="pl-s1"><span><span>x </span></span></span> <span class="pl-c1"><span><span>=</span></span></span> <span class="pl-en"><span><span>反向</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>單詞</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-stringlists-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC9"><span class="pl-k"><span><span>如果</span></span></span> <span class="pl-s1"><span><span>x </span></span></span> <span class="pl-c1"><span><span>== </span></span></span> <span class="pl-s1"><span><span>word</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-stringlists-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC10"><span class="pl-en"><span><span>打印</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“這是回文”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-stringlists-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC11"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-stringlists-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-stringlists-py-LC12"><span class="pl-en"><span><span>打印</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“這不是回文”</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
<h3>p7</h3>
<strong>List Comprehensions Solutions </strong>
<p><strong>Exercise 7</strong></p>
<p>Let’s say I give you a list saved in a variable:<span> </span><code class="highlighter-rouge">a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code>. Write one line of Python that takes this list<span> </span><code class="highlighter-rouge">a</code><span> </span>and makes a new list that has only the even elements of this list in it.</p>
<p><strong>Sample solutions</strong></p>
<p>For the meat of the solution, check this out:</p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC1">
<pre>   1    b = [element for element in a if element % 2 == 0]</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line">
<div><span class="pl-s1"><span> <span> </span><a href="https://gist.github.com/anonymous/9779343#file-gistfile1-py">gistfile1.py</a></span><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>                                <a href="https://gist.github.com/anonymous/9779343/raw/f775b4bd8163439e95cf1dc2d37e274d9a62d696/gistfile1.py">view raw</a></span></div>
</td>
</tr>
</tbody>
</table>
<p>And for a “complete” solution, look at this:</p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-7-list-comprehension-LC1">
<pre>   1    __author__ = 'jhunt'
   2    
   3    a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
   4    b = [number for number in a if number % 2 == 0]
   5
   6    print(b)</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line">  <a href="https://gist.github.com/jeffhunt/9659795#file-exercise-7-list-comprehension">Exercise 7 - List Comprehension</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>    <a href="https://gist.github.com/jeffhunt/9659795/raw/45c305e1097747b1ec456b4ca51c1b8100bbfa66/Exercise%207%20-%20List%20Comprehension">view raw</a></td>
</tr>
</tbody>
</table>
<div class="gist" id="gist9659795">
<div class="gist-file">
<div class="gist-meta"></div>
</div>
</div>
<p>For a solution that uses the<span> </span><code class="highlighter-rouge">random</code><span> </span>library to generate test lists, check this out:</p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-list_comprehension-py-LC1">
<pre>   1    import random
   2
   3    numlist = []
<span>   4    </span>list_length = random.randint(5,15)
<span>   5    </span>
<span>   6    </span>
<span>   7    </span>while len(numlist) &lt; list_length:
<span>   8    </span>    numlist.append(random.randint(1,75))
<span>   9    </span>    
<span>  10    </span>
<span>  11    </span>evenlist = [number for number in numlist if number % 2 == 0] 
<span>  12    </span>
<span>  13    </span>print(numlist)
<span>  14    </span>print(evenlist)</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"> <a href="https://gist.github.com/JamieMacIver/9782963#file-list_comprehension-py">list_comprehension.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>     <a href="https://gist.github.com/JamieMacIver/9782963/raw/38d3687da976010a1d0892897af7ed162c5aaf51/list_comprehension.py">view raw</a></td>
</tr>
</tbody>
</table>
<div class="gist" id="gist9782963">
<div class="gist-file">
<p class="gist-meta"><strong>Share the fun!</strong></p>
<div class="gist-meta"><strong> 清單理解解決方案  </strong> </div>
</div>
</div>
<p><strong><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">練習7</a></strong></p>
<p><span><span>假設我給您一個保存在變量中的列表：</span></span><code class="highlighter-rouge">a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</code><span><span>。</span><span>編寫一行Python來獲取此列表，</span></span><code class="highlighter-rouge">a</code><span><span>並創建一個僅包含該列表偶數元素的新列表。</span></span></p>
<p><strong>樣品解決方案</strong></p>
<p><span><span>對於解決方案的實質，請檢查以下內容：</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC1">
<pre>   1    b = [element for element in a if element % 2 == 0]</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-s1"><span>  <a href="https://gist.github.com/anonymous/9779343#file-gistfile1-py">gistfile1.py</a></span><span> 由</span><span> </span><a href="https://github.com/">GitHub</a> 託管                                   <a href="https://gist.github.com/anonymous/9779343/raw/f775b4bd8163439e95cf1dc2d37e274d9a62d696/gistfile1.py">查看原始</a></span></td>
</tr>
</tbody>
</table>
<p><span><span>對於“完整”的解決方案，請看以下內容：</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-7-list-comprehension-LC1">
<pre>   1    __author__ = 'jhunt'
   2    
   3    a = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
   4    b = [number for number in a if number % 2 == 0]
   5
   6    print(b)</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"> <span> </span><a href="https://gist.github.com/jeffhunt/9659795#file-exercise-7-list-comprehension">練習 7 - 清單理解</a><span> 由</span><span> </span><a href="https://github.com/">GitHub</a> 託管                            <a href="https://gist.github.com/jeffhunt/9659795/raw/45c305e1097747b1ec456b4ca51c1b8100bbfa66/Exercise%207%20-%20List%20Comprehension">查看原始</a></td>
</tr>
</tbody>
</table>
<p><span><span>對於使用該</span></span><code class="highlighter-rouge">random</code><span><span>庫生成測試列表</span><span>的解決方案</span><span>，請檢查以下內容：</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-list_comprehension-py-LC1">
<pre>   1    import random
   2
   3    numlist = []
<span>   4    </span>list_length = random.randint(5,15)
<span>   5    </span>
<span>   6    </span>
<span>   7    </span>while len(numlist) &lt; list_length:
<span>   8    </span>    numlist.append(random.randint(1,75))
<span>   9    </span>    
<span>  10    </span>
<span>  11    </span>evenlist = [number for number in numlist if number % 2 == 0] 
<span>  12    </span>
<span>  13    </span>print(numlist)
<span>  14    </span>print(evenlist)</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"> <a href="https://gist.github.com/JamieMacIver/9782963#file-list_comprehension-py">list_comprehension.py</a><span> </span>由<span> </span><a href="https://github.com/">GitHub</a> 託管                     <a href="https://gist.github.com/JamieMacIver/9782963/raw/38d3687da976010a1d0892897af7ed162c5aaf51/list_comprehension.py">查看原始</a></td>
</tr>
</tbody>
</table>
<p id="share"><strong>分享樂趣！</strong></p>
<h3>p8</h3>
<strong>Rock Paper Scissors Solutions</strong>
<p><strong><a href="https://www.practicepython.org/exercise/2014/03/26/08-rock-paper-scissors.html">Exercise 8</a></strong></p>
<p>Make a two-player Rock-Paper-Scissors game. (<em>Hint: Ask for player plays (using<span> </span><code class="highlighter-rouge">input</code>), compare them, print out a message of congratulations to the winner, and ask if the players want to start a new game</em>)</p>
<p>Remember the rules:</p>
<ul>
<li>Rock beats scissors</li>
<li>Scissors beats paper</li>
<li>Paper beats rock</li>
</ul>
<p><strong>Sample solution</strong></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-rockpaperscissors-py-LC1">
<pre>   1    import sys
   2
   3    user1 = input("What's your name?")
   4    user2 = input("And your name?")
   5    user1_answer = input("%s, do yo want to choose rock, paper or scissors?" % user1)
   6    user2_answer = input("%s, do you want to choose rock, paper or scissors?" % user2)
   7    
   8    def compare(u1, u2):
   9        if u1 == u2:
  10        return("It's a tie!")
  11        elif u1 == 'rock':
  12            if u2 == 'scissors':
  13                return("Rock wins!")
  14            else:
  15                return("Paper wins!")
  16        elif u1 == 'scissors':
  17            if u2 == 'paper':
  18                return("Scissors win!")
  19            else:
  20                return("Rock wins!")
  21        elif u1 == 'paper':
  22            if u2 == 'rock':
  23                return("Paper wins!")
  24            else:
  25                return("Scissors win!")
  26        else:
  27            return("Invalid input! You have not entered rock, paper or scissors, try again.")
  28            sys.exit()
  29
  30    print(compare(user1_answer, user2_answer)</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-en"> <a href="https://gist.github.com/redice99/21ceca1561519f5a12bc#file-rockpaperscissors-py">rockpaperscissors.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>   <span> </span><a href="https://gist.github.com/redice99/21ceca1561519f5a12bc/raw/83a656379141e32ded22ae53d030b74dd02c4b97/rockpaperscissors.py">view raw</a></span></td>
</tr>
</tbody>
</table>
<p>Another sample solution uses a clever way of checking the winner:</p>
<div class="gist" id="gist29840996">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-rock-paper-scissors-game">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-rock-paper-scissors-game-LC1">
<pre>   1    print('''Please pick one:
   2                rock
   3                scissors
   4                paper''')
   5    
   6    while True:
   7        game_dict = {'rock': 1, 'scissors': 2, 'paper': 3}
   8        player_a = str(input("Player a: "))
   9        player_b = str(input("Player b: "))
  10        a = game_dict.get(player_a)
  11        b = game_dict.get(player_b)
  12        dif = a - b
  13    
  14        if dif in [-1, 2]:
  15            print('player a wins.')
  16            if str(input('Do you want to play another game, yes or no?\n')) == 'yes':
  17                continue
  18            else:
  19                print('game over.')
  20                break
  21        elif dif in [-2, 1]:
  22            print('player b wins.')
  23            if str(input('Do you want to play another game, yes or no?\n')) == 'yes':
  24                continue
  25            else:
  26                print('game over.')
  27                break
  28        else:
  29            print('Draw.Please continue.')
  30            print('')</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"> <a href="https://gist.github.com/springtan/6f579c3160bdcac2a0df#file-rock-paper-scissors-game">rock, paper, scissors game</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>   <span> </span><a href="https://gist.github.com/springtan/6f579c3160bdcac2a0df/raw/8c7899c1115d927feb27b82dc835a032f3473b56/rock,%20paper,%20scissors%20game">view raw</a></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<p id="share"><strong>Share the fun!</strong></p>
<p><strong> 剪刀石頭布解決方案</strong></p>
<p><strong><a href="https://www.practicepython.org/exercise/2014/03/26/08-rock-paper-scissors.html">練習8</a></strong></p>
<p><span><span>製作兩人石頭剪刀布遊戲。</span><span>（</span></span><em><span><span>提示：（使用</span></span><code class="highlighter-rouge">input</code><span><span>）</span><span>詢問玩家玩法</span><span>，進行比較，打印出對獲勝者表示祝賀的消息，並詢問玩家是否要開始新遊戲</span></span></em><span><span>）</span></span></p>
<p><span><span>記住規則：</span></span></p>
<ul>
<li><span><span>搖滾剪刀</span></span></li>
<li><span><span>剪刀打紙</span></span></li>
<li><span><span>紙打石頭</span></span></li>
</ul>
<p><strong>樣品解決方案</strong></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-rockpaperscissors-py-LC1">
<pre>   1    import sys
   2
   3    user1 = input("What's your name?")
   4    user2 = input("And your name?")
   5    user1_answer = input("%s, do yo want to choose rock, paper or scissors?" % user1)
   6    user2_answer = input("%s, do you want to choose rock, paper or scissors?" % user2)
   7    
   8    def compare(u1, u2):
   9        if u1 == u2:
  10        return("It's a tie!")
  11        elif u1 == 'rock':
  12            if u2 == 'scissors':
  13                return("Rock wins!")
  14            else:
  15                return("Paper wins!")
  16        elif u1 == 'scissors':
  17            if u2 == 'paper':
  18                return("Scissors win!")
  19            else:
  20                return("Rock wins!")
  21        elif u1 == 'paper':
  22            if u2 == 'rock':
  23                return("Paper wins!")
  24            else:
  25                return("Scissors win!")
  26        else:
  27            return("Invalid input! You have not entered rock, paper or scissors, try again.")
  28            sys.exit()
  29
  30    print(compare(user1_answer, user2_answer)</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-en"><a href="https://gist.github.com/redice99/21ceca1561519f5a12bc#file-rockpaperscissors-py">rockpaperscissors.py</a><span> </span>由<span> </span><a href="https://github.com/">GitHub</a> 託管  <span> </span><a href="https://gist.github.com/redice99/21ceca1561519f5a12bc/raw/83a656379141e32ded22ae53d030b74dd02c4b97/rockpaperscissors.py">查看原始</a></span></td>
</tr>
</tbody>
</table>
<p><span><span>另一個示例解決方案使用一種巧妙的方法來檢查獲勝者：</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-rock-paper-scissors-game-LC1">
<pre>   1    print('''Please pick one:
   2                rock
   3                scissors
   4                paper''')
   5    
   6    while True:
   7        game_dict = {'rock': 1, 'scissors': 2, 'paper': 3}
   8        player_a = str(input("Player a: "))
   9        player_b = str(input("Player b: "))
  10        a = game_dict.get(player_a)
  11        b = game_dict.get(player_b)
  12        dif = a - b
  13    
  14        if dif in [-1, 2]:
  15            print('player a wins.')
  16            if str(input('Do you want to play another game, yes or no?\n')) == 'yes':
  17                continue
  18            else:
  19                print('game over.')
  20                break
  21        elif dif in [-2, 1]:
  22            print('player b wins.')
  23            if str(input('Do you want to play another game, yes or no?\n')) == 'yes':
  24                continue
  25            else:
  26                print('game over.')
  27                break
  28        else:
  29            print('Draw.Please continue.')
  30            print('')</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"> <a href="https://gist.github.com/springtan/6f579c3160bdcac2a0df#file-rock-paper-scissors-game">石頭, 布, 剪刀遊戲</a><span> </span>由<span> </span><a href="https://github.com/">GitHub</a> 託管  <span> </span><a href="https://gist.github.com/springtan/6f579c3160bdcac2a0df/raw/8c7899c1115d927feb27b82dc835a032f3473b56/rock,%20paper,%20scissors%20game">查看原始</a></td>
</tr>
</tbody>
</table>
<div class="gist" id="gist29840996">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-rock-paper-scissors-game">
<p class="Box-body p-0 blob-wrapper data type-text" itemprop="text"><strong>分享樂趣！</strong></p>
</div>
</div>
</div>
</div>
</div>
<h3>p9</h3>
<strong>Guessing Game One Solutions</strong>
<p><strong><a href="https://www.practicepython.org/exercise/2014/04/02/09-guessing-game-one.html">Exercise 9</a></strong></p>
<p>Generate a random number between 1 and 9 (including 1 and 9). Ask the user to guess the number, then tell them whether they guessed too low, too high, or exactly right. (_Hint: remember to use the user input lessons from the very<span> </span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html_">first exercise</a></p>
<p>Extras:</p>
<ul>
<li>Keep the game going until the user types “exit”</li>
<li>Keep track of how many guesses the user has taken, and when the game ends, print this out.</li>
</ul>
<p><strong>Sample solution</strong></p>
<p>Great example of a solution including both extras!</p>
<div class="gist" id="gist10153508">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-guessing_game-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-guessing_game-py-LC1">
<pre>   1    import random
   2    
   3    number = random.randint(1,9)
   4    guess = 0
   5    count = 0
   6    
   7    
   8    while guess != number and guess != "exit":
   9        guess = input("What's your guess?")
  10        
  11        if guess == "exit":
  12            break
  13        
  14        guess = int(guess)
  15        count += 1
  16        
  17        if guess &lt; number:
  18            print("Too low!")
  19        elif guess &gt; number:
  20            print("Too high!")
  21        else:
  22            print("You got it!")
  23            print("And it only took you",count,"tries!")</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-en"> <a href="https://gist.github.com/JamieMacIver/10153508#file-guessing_game-py">guessing_game.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>   <span> </span><a href="https://gist.github.com/JamieMacIver/10153508/raw/8f1eb4d52b84314d7ecef92096c6ddd999ae2264/guessing_game.py">view raw</a></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<p>And another:</p>
<div class="gist" id="gist28664224">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-practice9-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-practice9-py-LC1">
<pre>   1    import random
   2    
   3    rd = random.randint(1,9)
   4    guess = 0
   5    c = 0
   6    while guess != rd and guess != "exit":
   7        guess = input("Enter a guess between 1 to 9")
   8    
   9        if guess == "exit":
  10            break
  11    
  12        guess = int(guess)
  13        c += 1
  14    
  15        if guess &lt; rd:
  16            print("Too low")
  17        elif guess &gt; rd:
  18            print("Too high")
  19        else:
  20            print("Right!")
  21            print("You took only", c, "tries!")
  22    input()</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-en"> <a href="https://gist.github.com/avillareal98/9a2b5e5b59880d8ea6f8#file-practice9-py">practice9.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>   <span> </span><a href="https://gist.github.com/avillareal98/9a2b5e5b59880d8ea6f8/raw/e8caf9c3faa972346fbb1d35ae3ab280a087f97c/practice9.py">view raw</a></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
<p>And another, with lots of helpful text!</p>
<div class="gist" id="gist28850575">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-09guessinggameone-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-09guessinggameone-py-LC1">
<pre>   1    import random
   2    
   3    # Awroken
   4    
   5    MINIMUM = 1
   6    MAXIMUM = 9
   7    NUMBER = random.randint(MINIMUM, MAXIMUM)
   8    GUESS = None
   9    ANOTHER = None
  10    TRY = 0
  11    RUNNING = True
  12    
  13    print "Alright..."
  14    
  15    while RUNNING:
  16        GUESS = raw_input("What is your lucky number? ")
  17        if int(GUESS) &lt; NUMBER:
  18            print "Wrong, too low."
  19        elif int(GUESS) &gt; NUMBER:
  20            print "Wrong, too high."
  21        elif GUESS.lower() == "exit":
  22            print "Better luck next time."
  23        elif int(GUESS) == NUMBER:
  24            print "Yes, that's the one, %s." % str(NUMBER)
  25            if TRY &lt; 2:
  26                print "Impressive, only %s tries." % str(TRY)
  27            elif TRY &gt; 2 and TRY &lt; 10:
  28                print "Pretty good, %s tries." % str(TRY)
  29           else:
  30                print "Bad, %s tries." % str(TRY)
  31            RUNNING = False
  32        TRY += 1</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-v"> <a href="https://gist.github.com/anonymous/0502baf8a01e3aa53550#file-09guessinggameone-py">09GuessingGameOne.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a>   <span> </span><a href="https://gist.github.com/anonymous/0502baf8a01e3aa53550/raw/c97abf833f6e5c5bd56479fb77ab0ddbe1535f7b/09GuessingGameOne.py">view raw</a></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"></div>
</div>
</div>
<div id="share"><strong>Share the fun!</strong></div>
<p><strong> 猜遊戲一解決方案</strong></p>
<p><strong><a href="https://www.practicepython.org/exercise/2014/04/02/09-guessing-game-one.html">練習9</a></strong></p>
<p><span><span>生成1到9之間的隨機數（包括1到9）。</span><span>讓用戶猜數字，然後告訴他們猜的是太低，太高還是完全正確。</span><span>（_提示：請記住在</span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html_"><span>第一練習中</span></a><span>使用用戶輸入的課程</span></span><a href="https://www.practicepython.org/exercise/2014/01/29/01-character-input.html_"><span></span></a></p>
<p><span><span>附加功能：</span></span></p>
<ul>
<li><span><span>繼續遊戲，直到用戶鍵入“退出”</span></span></li>
<li><span><span>跟踪用戶進行了多少猜測，當遊戲結束時，將其打印出來。</span></span></li>
</ul>
<p><strong>樣品解決方案</strong></p>
<p><span><span>一個解決方案的好例子，包括兩個額外功能！</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-guessing_game-py-LC1">
<pre>   1    import random
   2    
   3    number = random.randint(1,9)
   4    guess = 0
   5    count = 0
   6    
   7    
   8    while guess != number and guess != "exit":
   9        guess = input("What's your guess?")
  10        
  11        if guess == "exit":
  12            break
  13        
  14        guess = int(guess)
  15        count += 1
  16        
  17        if guess &lt; number:
  18            print("Too low!")
  19        elif guess &gt; number:
  20            print("Too high!")
  21        else:
  22            print("You got it!")
  23            print("And it only took you",count,"tries!")</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-en"> <a href="https://gist.github.com/JamieMacIver/10153508#file-guessing_game-py">guessing_game.py</a><span> </span>由<span> </span><a href="https://github.com/">GitHub</a> 託管  <span> </span><a href="https://gist.github.com/JamieMacIver/10153508/raw/8f1eb4d52b84314d7ecef92096c6ddd999ae2264/guessing_game.py">查看原始</a></span></td>
</tr>
</tbody>
</table>
<p><span><span>還有一個：</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-practice9-py-LC1">
<pre>   1    import random
   2    
   3    rd = random.randint(1,9)
   4    guess = 0
   5    c = 0
   6    while guess != rd and guess != "exit":
   7        guess = input("Enter a guess between 1 to 9")
   8    
   9        if guess == "exit":
  10            break
  11    
  12        guess = int(guess)
  13        c += 1
  14    
  15        if guess &lt; rd:
  16            print("Too low")
  17        elif guess &gt; rd:
  18            print("Too high")
  19        else:
  20            print("Right!")
  21            print("You took only", c, "tries!")
  22    input()</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-en"> <a href="https://gist.github.com/avillareal98/9a2b5e5b59880d8ea6f8#file-practice9-py">practice9.py</a><span> </span>由<span> </span><a href="https://github.com/">GitHub</a> 託管  <span> </span><a href="https://gist.github.com/avillareal98/9a2b5e5b59880d8ea6f8/raw/e8caf9c3faa972346fbb1d35ae3ab280a087f97c/practice9.py">查看原始</a></span></td>
</tr>
</tbody>
</table>
<p><span><span>還有很多有用的文字！</span></span></p>
<table border="1" cellspacing="0" class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-code blob-code-inner js-file-line" id="file-09guessinggameone-py-LC1">
<pre>   1    import random
   2    
   3    # Awroken
   4    
   5    MINIMUM = 1
   6    MAXIMUM = 9
   7    NUMBER = random.randint(MINIMUM, MAXIMUM)
   8    GUESS = None
   9    ANOTHER = None
  10    TRY = 0
  11    RUNNING = True
  12    
  13    print "Alright..."
  14    
  15    while RUNNING:
  16        GUESS = raw_input("What is your lucky number? ")
  17        if int(GUESS) &lt; NUMBER:
  18            print "Wrong, too low."
  19        elif int(GUESS) &gt; NUMBER:
  20            print "Wrong, too high."
  21        elif GUESS.lower() == "exit":
  22            print "Better luck next time."
  23        elif int(GUESS) == NUMBER:
  24            print "Yes, that's the one, %s." % str(NUMBER)
  25            if TRY &lt; 2:
  26                print "Impressive, only %s tries." % str(TRY)
  27            elif TRY &gt; 2 and TRY &lt; 10:
  28                print "Pretty good, %s tries." % str(TRY)
  29           else:
  30                print "Bad, %s tries." % str(TRY)
  31            RUNNING = False
  32        TRY += 1</pre>
</td>
</tr>
<tr>
<td class="blob-code blob-code-inner js-file-line"><span class="pl-v"> <a href="https://gist.github.com/anonymous/0502baf8a01e3aa53550#file-09guessinggameone-py">09GuessingGameOne.py</a><span> </span>由<span> </span><a href="https://github.com/">GitHub</a> 託管  <span> </span><a href="https://gist.github.com/anonymous/0502baf8a01e3aa53550/raw/c97abf833f6e5c5bd56479fb77ab0ddbe1535f7b/09GuessingGameOne.py">查看原始</a></span></td>
</tr>
</tbody>
</table>
<p id="share"><strong>分享樂趣！</strong></p>
<h3>P10</h3>
<div class="gist-meta">List Overlap Comprehensions Solutions
<div><i></i></div>
<a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html">Exercise 10</a>
<p>This week’s exercise is going to be revisiting an old exercise (see<span> </span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html">Exercise 5</a>), except require the solution in a different way.</p>
<p>Take two lists, say for example these two:</p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p>and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this<span> </span><em>using at least one list comprehension</em>. (<em>Hint: Remember<span> </span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html">list comprehensions</a><span> </span>from Exercise 7</em>).</p>
<p>Extra:</p>
<ul>
<li>Randomly generate two lists to test this</li>
</ul>
Sample solution
<p>A user-submitted solution:</p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1">import random</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3">a = random.sample(range(1,30), 12)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4">b = random.sample(range(1,30), 16)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5">result = [i for i in a if i in b]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010">view raw</a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10">Exercise 10</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>As a few commenters / readers of this blog have pointed out (thanks mainly to Gautam and Jeff), the exercise as posed is actually impossible to write in a single line of Python. The problem is this: the proposed reader solution (and the solution that I had in mind myself) as written above does not take into account the fact that there might be duplicates in the resulting list, where I specifically asked to not include duplicates. This means that in the simple example I gave above,<span> </span><code class="highlighter-rouge">a</code>’s first element is<span> </span><code class="highlighter-rouge">1</code><span> </span>will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list because it is in<span> </span><code class="highlighter-rouge">b</code>. But then it’s next element is also<span> </span><code class="highlighter-rouge">1</code>, and is also in<span> </span><code class="highlighter-rouge">b</code>, so will be added to the<span> </span><code class="highlighter-rouge">result</code><span> </span>list. So the solution as given (the comprehension<span> </span><code class="highlighter-rouge">[i for i in a if i in b]</code>) will not yield the correct result on the example solution.</p>
<p>Instead, as pointed out by Gautam and Jeff, the simplest way to achieve this solution would be to make sure that we are only looking at unique elements from<span> </span><code class="highlighter-rouge">a</code>, the first list in the comprehension. We have not discussed doing this easily in Python on this blog using the<span> </span><code class="highlighter-rouge">set</code><span> </span>built-in function, but if you know it, the solution will look like this:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1">b</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1">result</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">set</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">b</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py">list-overlap-comprehensions.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>But, to achieve the same results as asked in the original question while still using a list comprehension (however, definitely not using a single line of code), would be to make sure that there is no overlap in the new list after it is constructed, using the traditional<span> </span><code class="highlighter-rouge">for</code><span> </span>loop on lists:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1">b</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1">result_overlap</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">set</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1">result</span><span> </span><span class="pl-c1">=</span><span> </span>[]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k">for</span><span> </span><span class="pl-s1">element</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">result_overlap</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k">if</span><span> </span><span class="pl-s1">element</span><span> </span><span class="pl-c1">not</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">result</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1">result</span>.<span class="pl-en">appent</span>(<span class="pl-s1">element</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py">view raw</a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py">list-overlap-comprehensions-for.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>Or, to practice list comprehensions again, this can be done with two list comprehensions:</p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">random</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">12</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1">b</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s1">random</span>.<span class="pl-en">sample</span>(<span class="pl-en">range</span>(<span class="pl-c1">1</span>,<span class="pl-c1">30</span>),<span> </span><span class="pl-c1">16</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1">result_overlaps</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">set</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">b</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1">result</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">i</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">i</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-s1">result_overlaps</span><span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">result_overlaps</span>.<span class="pl-en">count</span>(<span class="pl-s1">i</span>)<span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">1</span>]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py">view raw</a></div>
<div class="gist-meta"><span></span>
<div><i></i></div>
<a href="https://www.practicepython.org/exercise/2014/04/10/10-list-overlap-comprehensions.html"><span><span>練習10</span></span></a>
<p><span><span>本週的練習將重溫舊的練習（請參閱</span></span><a href="https://www.practicepython.org/exercise/2014/03/05/05-list-overlap.html"><span><span>練習5</span></span></a><span><span>），只是需要以其他方式解決。</span></span></p>
<p><span><span>拿兩個列表，舉例來說，這兩個：</span></span></p>
<figure class="highlight">
<pre><code class="language-python" data-lang="python">	<span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">89</span><span class="p">]</span>
	<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">]</span></code></pre>
</figure>
<p><span><span>並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。</span><span>確保您的程序可以在兩個不同大小的列表上運行。</span></span><em><span><span>至少使用一個列表理解來</span></span></em><span><span>寫這個</span><span>。</span><span>（</span></span><em><span><span>提示：記住</span><span>練習7中的</span></span><a href="https://www.practicepython.org/exercise/2014/03/19/07-list-comprehensions.html"><span><span>列表理解</span></span></a><span></span></em><span><span>）。</span></span></p>
<p><span><span>額外：</span></span></p>
<ul>
<li><span><span>隨機生成兩個列表進行測試</span></span></li>
</ul>
<span><span>樣品溶液</span></span>
<p><span><span>用戶提交的解決方案：</span></span></p>
<div class="gist" id="gist10904252">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-exercise-10">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-exercise-10-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC1"><span><span>隨機導入</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-exercise-10-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC2"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-exercise-10-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC3"><span><span>一個= random.sample（range（1,30），12）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-exercise-10-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC4"><span><span>b = random.sample（範圍（1,30），16）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-exercise-10-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-exercise-10-LC5"><span><span>結果= [如果b中有i，則a中的i代表i]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/10904252/raw/02252b579b7b5d544890dadf356c941ad73e78d4/Exercise%2010"><span><span>查看原始</span></span></a><a href="https://gist.github.com/anonymous/10904252#file-exercise-10"><span><span>練習10</span></span></a><span><span><span> </span>由</span></span><a href="https://github.com/"><span><span>GitHub託管</span></span></a></div>
</div>
</div>
<p><span><span>正如該博客的一些評論者/讀者所指出的（主要感謝Gautam和Jeff），所提出的練習實際上不可能用Python編寫。</span><span>問題是這樣的：上面寫的建議的閱讀器解決方案（以及我自己想到的解決方案）沒有考慮到結果列表中可能存在重複項的事實，我特別要求不要包含重複項。</span><span>這意味著在我上面給出的簡單示例中，</span></span><code class="highlighter-rouge">a</code><span><span>第一個元素</span></span><code class="highlighter-rouge">1</code><span><span>將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中，因為它在中</span></span><code class="highlighter-rouge">b</code><span><span>。</span><span>但隨後它的下一個元素也是</span></span><code class="highlighter-rouge">1</code><span><span>，並且也在</span></span><code class="highlighter-rouge">b</code><span><span>，因此將被添加到</span></span><code class="highlighter-rouge">result</code><span><span>列表中。</span><span>因此，給定的解決方案（comprehension<span> </span></span></span><code class="highlighter-rouge">[i for i in a if i in b]</code><span><span>）將無法在示例解決方案上產生正確的結果。</span></span></p>
<p><span><span>相反，正如Gautam和Jeff所指出的那樣，實現此解決方案的最簡單方法是確保僅查看來自</span></span><code class="highlighter-rouge">a</code><span><span>理解中第一個列表的</span><span>唯一元素</span><span>。</span><span>我們沒有在此博客上使用</span></span><code class="highlighter-rouge">set</code><span><span>內置函數</span><span>討論在Python中輕鬆實現此操作的</span><span>方法，但是如果您知道，解決方案將如下所示：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC1"><span class="pl-k"><span></span></span><span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC3"><span class="pl-s1"><span><span>b<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-py-LC4"><span class="pl-s1"><span><span>導致</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>b</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-py"><span><span>list-overlap-comprehensions.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>但是，要在仍然使用列表理解的情況下達到與原始問題相同的結果（但是，絕對不要使用一行代碼），將確保新列表在構建後沒有重疊，使用</span></span><code class="highlighter-rouge">for</code><span><span>列表上</span><span>的傳統</span><span>循環：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-for-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-for-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC1"><span class="pl-k"><span></span></span><span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-for-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-for-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC3"><span class="pl-s1"><span><span>b<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-for-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC4"><span class="pl-s1"><span><span>result_overlap<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>b</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-for-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC5"><span class="pl-s1"><span><span>結果</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-list-overlap-comprehensions-for-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC6"><span class="pl-k"><span><span>對於</span></span></span><span> </span><span class="pl-s1"><span><span>元件</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>result_overlap</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-list-overlap-comprehensions-for-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC7"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>要素</span></span></span><span> </span><span class="pl-c1"><span><span>不能</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>結果</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-list-overlap-comprehensions-for-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-for-py-LC8"><span class="pl-s1"><span><span>結果</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>出現</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>元素</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-for.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-for-py"><span><span>list-overlap-comprehensions-for.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>或者，要再次練習列表推導，可以使用兩個列表推導來完成：</span></span></p>
<div class="gist" id="gist16704299">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-list-overlap-comprehensions-2-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-list-overlap-comprehensions-2-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC1"><span class="pl-k"><span></span></span><span><span class="pl-s1"><span>隨機</span></span><span class="pl-k"><span>導入</span></span></span><span class="pl-s1"><span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-list-overlap-comprehensions-2-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機的</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>12</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-list-overlap-comprehensions-2-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC3"><span class="pl-s1"><span><span>b<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-s1"><span><span>隨機</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>樣品</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>，</span></span><span class="pl-c1"><span><span>30</span></span></span><span><span>），</span></span><span class="pl-c1"><span><span>16</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-list-overlap-comprehensions-2-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC4"><span class="pl-s1"><span><span>result_overlaps<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>集</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>一</span></span></span><span><span>）</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>b</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-list-overlap-comprehensions-2-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-list-overlap-comprehensions-2-py-LC5"><span class="pl-s1"><span><span>導致</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[</span></span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-k"><span><span>為</span></span></span><span> </span><span class="pl-s1"><span><span>我</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-s1"><span><span>result_overlaps</span></span></span><span> </span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>result_overlaps</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>數</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>i</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/mprat/654b5f9286bcc2469077/raw/797c8e56bf0435c5130fa94ef666f119aef0ef07/list-overlap-comprehensions-2.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/mprat/654b5f9286bcc2469077#file-list-overlap-comprehensions-2-py"><span><span>list-overlap-comprehensions-2.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<div id="share"><span><span>分享樂趣！</span></span></div>
<div>
<h3>P11</h3>
<span><span><span><span>Check Primality Functions Solutions</span></span></span></span>
<div><i></i></div>
<span><span><span><a href="https://www.practicepython.org/exercise/2014/04/16/11-check-primality-functions.html">Exercise 11</a><span></span></span></span></span>
<p>Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to<span> </span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html">Exercise 4</a><span> </span>to help you.</p>
<span><span><span><span>Sample solution</span></span></span></span>
<p>There are many ways of solving this problem, so here are a sample solutions:</p>
<p>This one is a different breakdown of functions to solve the problem. The strings between three<span> </span><code class="highlighter-rouge">'''</code><span> </span>marks are comments in the code that describe what each function does.</p>
<div class="gist" id="gist11196563">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-prime_check-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-prime_check-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC1"><span class="pl-k">def</span><span> </span><span class="pl-en">get_number</span>(<span class="pl-s1">prompt</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-prime_check-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC2"><span class="pl-s">'''Returns integer value for input. Prompt is displayed text'''</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-prime_check-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC3"><span class="pl-k">return</span><span> </span><span class="pl-en">int</span>(<span class="pl-en">input</span>(<span class="pl-s1">prompt</span>))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-prime_check-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC4"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-prime_check-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC5"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-prime_check-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC6"><span class="pl-k">def</span><span> </span><span class="pl-en">is_prime</span>(<span class="pl-s1">number</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-prime_check-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC7"><span class="pl-s">'''Returns True for prime numbers, False otherwise'''</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-prime_check-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC8"><span class="pl-c">#Edge Cases</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-prime_check-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC9"><span class="pl-k">if</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">1</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-prime_check-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC10"><span class="pl-s1">prime</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-c1">False</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-prime_check-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC11"><span class="pl-k">elif</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">2</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-prime_check-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC12"><span class="pl-s1">prime</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-c1">True</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-prime_check-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC13"><span class="pl-c">#All other primes</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-prime_check-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC14"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-prime_check-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC15"><span class="pl-s1">prime</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-c1">True</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="16" id="file-prime_check-py-L16"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC16"><span class="pl-k">for</span><span> </span><span class="pl-s1">check_number</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">range</span>(<span class="pl-c1">2</span>, (<span class="pl-s1">number</span><span> </span><span class="pl-c1">/</span><span> </span><span class="pl-c1">2</span>)<span class="pl-c1">+</span><span class="pl-c1">1</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="17" id="file-prime_check-py-L17"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC17"><span class="pl-k">if</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">%</span><span> </span><span class="pl-s1">check_number</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="18" id="file-prime_check-py-L18"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC18"><span class="pl-s1">prime</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-c1">False</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="19" id="file-prime_check-py-L19"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC19"><span class="pl-k">break</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="20" id="file-prime_check-py-L20"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC20"><span class="pl-k">return</span><span> </span><span class="pl-s1">prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="21" id="file-prime_check-py-L21"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC21"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="22" id="file-prime_check-py-L22"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC22"><span class="pl-k">def</span><span> </span><span class="pl-en">print_prime</span>(<span class="pl-s1">number</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="23" id="file-prime_check-py-L23"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC23"><span class="pl-s1">prime</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-en">is_prime</span>(<span class="pl-s1">number</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="24" id="file-prime_check-py-L24"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC24"><span class="pl-k">if</span><span> </span><span class="pl-s1">prime</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="25" id="file-prime_check-py-L25"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC25"><span class="pl-s1">descriptor</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s">""</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="26" id="file-prime_check-py-L26"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC26"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="27" id="file-prime_check-py-L27"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC27"><span class="pl-s1">descriptor</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s">"not "</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="28" id="file-prime_check-py-L28"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC28"><span class="pl-en">print</span>(<span class="pl-s1">number</span>,<span class="pl-s">" is "</span>,<span> </span><span class="pl-s1">descriptor</span>,<span> </span><span class="pl-s">"prime."</span>,<span> </span><span class="pl-s1">sep</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s">""</span>,<span> </span><span class="pl-s1">end</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-s">"<span class="pl-cce">\n</span><span class="pl-cce">\n</span>"</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="29" id="file-prime_check-py-L29"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC29"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="30" id="file-prime_check-py-L30"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC30"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="31" id="file-prime_check-py-L31"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC31"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="32" id="file-prime_check-py-L32"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC32"><span class="pl-c">#never ending loop</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="33" id="file-prime_check-py-L33"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC33"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="34" id="file-prime_check-py-L34"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC34"><span class="pl-k">while</span><span> </span><span class="pl-c1">1</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">1</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="35" id="file-prime_check-py-L35"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC35"><span class="pl-en">print_prime</span>(<span class="pl-en">get_number</span>(<span class="pl-s">"Enter a number to check. Ctl-C to exit."</span>))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="36" id="file-prime_check-py-L36"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC36"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="37" id="file-prime_check-py-L37"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC37"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="38" id="file-prime_check-py-L38"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC38"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="39" id="file-prime_check-py-L39"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC39"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/JamieMacIver/11196563/raw/a16d5762b4089d33e34650a22adcdf3426fffe7e/prime_check.py">view raw</a><a href="https://gist.github.com/JamieMacIver/11196563#file-prime_check-py">prime_check.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>And here is a solution without using functions. It is also a correct solution that accomplishes the given task, just without the use of functions.</p>
<div class="gist" id="gist11074742">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-checkprimality-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-checkprimality-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC1"><span class="pl-k">import</span><span> </span><span class="pl-s1">sys</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-checkprimality-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC2"><span class="pl-s1">number</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-en">input</span>(<span class="pl-s">"Please enter a number"</span><span> </span><span class="pl-c1">+</span><span> </span><span class="pl-s">"<span class="pl-cce">\n</span>"</span><span> </span><span class="pl-c1">+</span><span> </span><span class="pl-s">"&gt;&gt;&gt;"</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-checkprimality-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC3"><span class="pl-s1">number</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-en">int</span>(<span class="pl-s1">number</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-checkprimality-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC4"><span class="pl-s1">prime</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-c1">False</span><span> </span><span class="pl-c">#initiate boolean for true false, default false</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-checkprimality-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC5"><span class="pl-k">if</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">&gt;</span><span> </span><span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-checkprimality-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC6"><span class="pl-k">for</span><span> </span><span class="pl-s1">x</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">range</span><span> </span>(<span class="pl-c1">2</span>,<span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">-</span><span> </span><span class="pl-c1">1</span>):<span> </span><span class="pl-c">#this range excludes number and 1, both of which number is divisible by</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-checkprimality-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC7"><span class="pl-k">if</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">%</span><span> </span><span class="pl-s1">x</span><span> </span><span class="pl-c1">!=</span><span> </span><span class="pl-c1">0</span>:<span> </span><span class="pl-c">#If number isn't evenly divisible by x, start over with the next one</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-checkprimality-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC8"><span class="pl-k">continue</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-checkprimality-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC9"><span class="pl-k">elif</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">%</span><span> </span><span class="pl-s1">x</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">0</span>:<span> </span><span class="pl-c">#If number is evenly divisible by x, it can't be prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-checkprimality-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC10"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is not prime."</span>)</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-checkprimality-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC11"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is prime."</span>)<span> </span><span class="pl-c">#number wasn't evenly divisible by any x, so it's prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-checkprimality-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC12"><span class="pl-k">elif</span><span> </span><span class="pl-s1">number</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-checkprimality-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC13"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is not prime."</span>)<span> </span><span class="pl-c">#According to the Google, 0 is not prime</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-checkprimality-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC14"><span class="pl-k">else</span>:<span class="pl-c">#if number is less than 0, the number is not prime (according to the Google).</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-checkprimality-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC15"><span class="pl-s1">sys</span>.<span class="pl-en">exit</span>(<span class="pl-s">"The number is not prime."</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0/raw/6d497872cdf8ce6f2b45731f1d6877b23baef995/checkprimality.py">view raw</a><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0#file-checkprimality-py">checkprimality.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>This solution doesn’t use functions, but does use list comprehensions, which are always fun. Thanks to Carlos for this solution. The interesting thing here is the observation that when you want to check if a number is prime, all you need to do is check the numbers from 2 to the square root of the number. This is because the pair of numbers that are both the largest factors of the number are<span> </span><code class="highlighter-rouge">square root of x</code><span> </span>and<span> </span><code class="highlighter-rouge">square root of x</code>. Otherwise, the number you are checking for can be found by finding the corresponding factor and checking it.</p>
<div class="gist" id="gist19197315">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-txt">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-txt-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC1"># Assumes that "a" contains an integer &gt; 2 whose primality needs to be verified</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-txt-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC2"># The algorithm builds a list of factors including the number 2 and all odd numbers</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-txt-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC3"># up to the square root of "a", and then checks if any of those numbers divides "a"</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-txt-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC4"># without a remainder - if so then "a" is not prime, else it is</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-txt-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC5">if sum([ True if a%factor == 0 else False for factor in ( [2] + list(range(3,int(math.sqrt(a))+1,2) )) ]):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-txt-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC6">print("Number is composite")</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-txt-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC7">else:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-txt-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC8">print("Number is prime")</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f/raw/d8d19ce0dd06a17f1db5c3140e641af6af2c35bb/gistfile1.txt">view raw</a><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f#file-gistfile1-txt">gistfile1.txt</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<p>Another solution is a clean, short solution that uses list comprehensions.</p>
<div class="gist" id="gist26292207">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-ex11-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-ex11-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC1"><span class="pl-s1">num</span><span> </span><span class="pl-c1">=</span><span> </span><span class="pl-en">int</span>(<span class="pl-en">raw_input</span>(<span class="pl-s">'Insert a number: '</span>))</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-ex11-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC2"><span class="pl-s1">a</span><span> </span><span class="pl-c1">=</span><span> </span>[<span class="pl-s1">x</span><span> </span><span class="pl-k">for</span><span> </span><span class="pl-s1">x</span><span> </span><span class="pl-c1">in</span><span> </span><span class="pl-en">range</span>(<span class="pl-c1">2</span>,<span> </span><span class="pl-s1">num</span>)<span> </span><span class="pl-k">if</span><span> </span><span class="pl-s1">num</span><span> </span><span class="pl-c1">%</span><span> </span><span class="pl-s1">x</span><span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">0</span>]</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-ex11-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC3"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-ex11-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC4"><span class="pl-k">def</span><span> </span><span class="pl-en">is_prime</span>(<span class="pl-s1">n</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-ex11-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC5"><span class="pl-k">if</span><span> </span><span class="pl-s1">num</span><span> </span><span class="pl-c1">&gt;</span><span> </span><span class="pl-c1">1</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-ex11-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC6"><span class="pl-k">if</span><span> </span><span class="pl-en">len</span>(<span class="pl-s1">a</span>)<span> </span><span class="pl-c1">==</span><span> </span><span class="pl-c1">0</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-ex11-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC7"><span class="pl-k">print</span><span> </span><span class="pl-s">'prime'</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-ex11-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC8"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-ex11-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC9"><span class="pl-k">print</span><span> </span><span class="pl-s">'NOT prime'</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-ex11-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC10"><span class="pl-k">else</span>:</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-ex11-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC11"><span class="pl-k">print</span><span> </span><span class="pl-s">'NOT prime'</span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-ex11-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC12"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-ex11-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC13"><span class="pl-en">is_prime</span>(<span class="pl-s1">num</span>)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/34620e5c9feeec8824df/raw/bafb93884dfb2ce89bc0ad47e0f0826bc2e05172/ex11.py">view raw</a><a href="https://gist.github.com/anonymous/34620e5c9feeec8824df#file-ex11-py">ex11.py</a><span> </span>hosted with ❤ by<span> </span><a href="https://github.com/">GitHub</a></div>
</div>
</div>
<div id="share">Share the fun!</div>
<div></div>
<div><span>檢查基本功能解決方案</span>
<h4 id="exercise-11"><a href="https://www.practicepython.org/exercise/2014/04/16/11-check-primality-functions.html"><span><span>練習11</span></span></a></h4>
<h4><span><span>向用戶詢問一個數字，並確定該數字是否為質數。</span><span>（對於那些忘記的人，質數是沒有除數的數。）</span><span>您可以（並且應該！）使用</span></span><a href="https://www.practicepython.org/exercise/2014/02/26/04-divisors.html"><span><span>練習4</span></span></a><span><span>的答案</span><span>來幫助您。</span></span></h4>
<span><span>樣品溶液</span></span>
<p><span><span>解決此問題的方法有很多，因此這裡有一個示例解決方案：</span></span></p>
<p><span><span>這是解決問題的功能的不同細分。</span><span>三個</span></span><code class="highlighter-rouge">'''</code><span><span>標記</span><span>之間的字符串</span><span>是代碼中的註釋，用於描述每個函數的功能。</span></span></p>
<div class="gist" id="gist11196563">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-prime_check-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-prime_check-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC1"><span class="pl-k"><span><span>def<span> </span></span></span></span><span class="pl-en"><span><span>get_number</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>提示</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-prime_check-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC2"><span class="pl-s"><span><span>'''返回輸入的整數值。</span><span>提示顯示文字'''</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-prime_check-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC3"><span class="pl-k"><span><span>返回</span></span></span><span> </span><span class="pl-en"><span><span>int</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>輸入</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>提示</span></span></span><span><span>））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-prime_check-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC4"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-prime_check-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC5"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-prime_check-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC6"><span class="pl-k"><span><span>def<span> </span></span></span></span><span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>number</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-prime_check-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC7"><span class="pl-s"><span><span>'''返回質數為True，否則為False'''</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-prime_check-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC8"><span class="pl-c"><span><span>＃邊緣案例</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-prime_check-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC9"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>數字</span></span></span><span> </span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-prime_check-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC10"><span class="pl-s1"><span><span>素數</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-c1"><span><span>假</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-prime_check-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC11"><span class="pl-k"><span><span>elif的</span></span></span><span> </span><span class="pl-s1"><span><span>數目</span></span></span><span> </span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-prime_check-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC12"><span class="pl-s1"><span><span>素數</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-c1"><span><span>真</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-prime_check-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC13"><span class="pl-c"><span><span>＃所有其他素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-prime_check-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC14"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-prime_check-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC15"><span class="pl-s1"><span><span>素數</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-c1"><span><span>真</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="16" id="file-prime_check-py-L16"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC16"><span class="pl-k"><span><span>用於</span></span></span><span> </span><span class="pl-s1"><span><span>check_number</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>，（</span></span><span class="pl-s1"><span><span>數</span></span></span><span> </span><span class="pl-c1"><span><span>/<span> </span></span></span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>+<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="17" id="file-prime_check-py-L17"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC17"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>數字</span></span></span><span> </span><span class="pl-c1"><span><span>％</span></span></span><span> </span><span class="pl-s1"><span><span>check_number<span> </span></span></span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="18" id="file-prime_check-py-L18"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC18"><span class="pl-s1"><span><span>素數</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-c1"><span><span>假</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="19" id="file-prime_check-py-L19"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC19"><span class="pl-k"><span><span>打破</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="20" id="file-prime_check-py-L20"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC20"><span class="pl-k"><span><span>返回</span></span></span><span> </span><span class="pl-s1"><span><span>素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="21" id="file-prime_check-py-L21"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC21"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="22" id="file-prime_check-py-L22"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC22"><span class="pl-k"><span><span>def<span> </span></span></span></span><span class="pl-en"><span><span>print_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>number</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="23" id="file-prime_check-py-L23"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC23"><span class="pl-s1"><span><span>素數</span></span></span><span> </span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>數字</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="24" id="file-prime_check-py-L24"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC24"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>素數</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="25" id="file-prime_check-py-L25"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC25"><span class="pl-s1"><span><span>描述符</span></span></span><span> </span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-s"><span><span>“”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="26" id="file-prime_check-py-L26"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC26"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="27" id="file-prime_check-py-L27"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC27"><span class="pl-s1"><span><span>描述符</span></span></span><span> </span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-s"><span><span>“不是”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="28" id="file-prime_check-py-L28"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC28"><span class="pl-en"><span><span>print</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>number</span></span></span><span><span>，</span></span><span class="pl-s"><span><span>“ is”</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>描述符</span></span></span><span><span>，</span></span><span class="pl-s"><span><span>“ prime。”</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>sep<span> </span></span></span></span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-s"><span><span>“”</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>end<span> </span></span></span></span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-s"><span><span>“<span> </span></span></span><span class="pl-cce"><span><span>\ n<span> </span></span></span></span><span class="pl-cce"><span><span>\ n</span></span></span><span><span><span> </span>”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="29" id="file-prime_check-py-L29"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC29"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="30" id="file-prime_check-py-L30"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC30"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="31" id="file-prime_check-py-L31"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC31"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="32" id="file-prime_check-py-L32"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC32"><span class="pl-c"><span><span>＃永不結束循環</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="33" id="file-prime_check-py-L33"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC33"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="34" id="file-prime_check-py-L34"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC34"><span class="pl-k"><span><span>而</span></span></span><span> </span><span class="pl-c1"><span><span>1<span> </span></span></span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>1時</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="35" id="file-prime_check-py-L35"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC35"><span class="pl-en"><span><span>print_prime</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>get_number</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“輸入要檢查的數字</span></span></span><span><span class="pl-en"><span>。Ctl<span> </span></span></span><span class="pl-s"><span>-C退出。”</span></span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="36" id="file-prime_check-py-L36"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC36"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="37" id="file-prime_check-py-L37"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC37"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="38" id="file-prime_check-py-L38"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC38"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="39" id="file-prime_check-py-L39"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-prime_check-py-LC39"></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/JamieMacIver/11196563/raw/a16d5762b4089d33e34650a22adcdf3426fffe7e/prime_check.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/JamieMacIver/11196563#file-prime_check-py"><span><span>prime_check.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>這是不使用函數的解決方案。</span><span>這也是不使用功能即可完成給定任務的正確解決方案。</span></span></p>
<div class="gist" id="gist11074742">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-checkprimality-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-checkprimality-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC1"><span class="pl-k"><span><span>導入</span></span></span><span> </span><span class="pl-s1"><span><span>系統</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-checkprimality-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC2"><span class="pl-s1"><span><span>數字</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-en"><span><span>輸入</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“請輸入數字”<span> </span></span></span></span><span class="pl-c1"><span><span>+<span> </span></span></span></span><span class="pl-s"><span><span>“<span> </span></span></span><span class="pl-cce"><span><span>\ n</span></span></span><span><span><span> </span>”<span> </span></span></span></span><span class="pl-c1"><span><span>+<span> </span></span></span></span><span class="pl-s"><span><span>“ &gt;&gt;&gt;”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-checkprimality-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC3"><span class="pl-s1"><span><span>數字</span></span></span><span> </span><span class="pl-c1"><span><span>=</span></span></span><span> </span><span class="pl-en"><span><span>整數</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>數字</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-checkprimality-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC4"><span class="pl-s1"><span><span>prime<span> </span></span></span></span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-c1"><span><span>False<span> </span></span></span></span><span class="pl-c"><span><span>＃初始化布爾值為true false，默認為false</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-checkprimality-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC5"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>數字</span></span></span><span> </span><span class="pl-c1"><span><span>&gt;<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-checkprimality-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC6"><span class="pl-k"><span><span>對於</span></span></span><span> </span><span class="pl-s1"><span><span>X</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>數</span></span></span><span> </span><span class="pl-c1"><span><span>-<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>）：<span> </span></span></span><span class="pl-c"><span><span>＃</span><span>此範圍排除數和1，這兩個數是整除</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-checkprimality-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC7"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>數字</span></span></span><span> </span><span class="pl-c1"><span><span>％</span></span></span><span> </span><span class="pl-s1"><span><span>x<span> </span></span></span></span><span class="pl-c1"><span><span>！=<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span>：＃</span></span><span class="pl-c"><span><span>如果數字不能被x整除，則從下一個開始</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-checkprimality-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC8"><span class="pl-k"><span><span>繼續</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-checkprimality-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC9"><span class="pl-k"><span><span>elif<span> </span></span></span></span><span class="pl-s1"><span><span>number<span> </span></span></span></span><span class="pl-c1"><span><span>％</span></span></span><span> </span><span class="pl-s1"><span><span>x<span> </span></span></span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span>：＃</span></span><span class="pl-c"><span><span>如果數字可以被x整除，則不能為素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-checkprimality-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC10"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>退出</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字不是素數。”</span></span></span><span><span>）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-checkprimality-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC11"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>exit</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字是質數。”</span></span></span><span><span>）</span><span class="pl-c"><span>#<span> </span></span></span><span class="pl-s"><span>number</span></span></span><span class="pl-c"><span><span>不能被任何x整除，所以它是質數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-checkprimality-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC12"><span class="pl-k"><span><span>elif的</span></span></span><span> </span><span class="pl-s1"><span><span>數目</span></span></span><span> </span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-checkprimality-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC13"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>exit</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字不是素數。”</span></span></span><span><span>）</span></span><span class="pl-c"><span><span>#Google表示，0不是素數</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="14" id="file-checkprimality-py-L14"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC14"><span class="pl-k"><span><span>else</span></span></span><span><span>：</span></span><span class="pl-c"><span><span>＃如果數字小於0，則該數字不是素數（根據Google）。</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="15" id="file-checkprimality-py-L15"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-checkprimality-py-LC15"><span class="pl-s1"><span><span>sys</span></span></span><span><span>。</span></span><span class="pl-en"><span><span>退出</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>“數字不是素數。”</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0/raw/6d497872cdf8ce6f2b45731f1d6877b23baef995/checkprimality.py"><span><span>查看原始</span></span></a><a href="https://gist.github.com/evamvid/4ada99be543f08280fb0#file-checkprimality-py"><span><span>checkprimality.py</span></span></a><span><span><span> </span>託管與❤通過</span></span><a href="https://github.com/"><span><span>GitHub上</span></span></a></div>
</div>
</div>
<p><span><span>該解決方案不使用函數，但是使用列表推導，這總是很有趣。</span><span>感謝卡洛斯的解決方案。</span><span>有趣的是，觀察到當您要檢查數字是否為質數時，只需檢查2到該數字的平方根之間的數字即可。</span><span>這是因為這兩個都是最大數字的數字對</span></span><code class="highlighter-rouge">square root of x</code><span><span>和</span></span><code class="highlighter-rouge">square root of x</code><span><span>。</span><span>否則，可以通過查找相應的因子並進行檢查來找到要檢查的編號。</span></span></p>
<div class="gist" id="gist19197315">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-txt">
<div class="Box-body p-0 blob-wrapper data type-text" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-txt-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC1"><span><span>＃假設“ a”包含一個大於2的整數，需要驗證其素數</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-txt-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC2"><span><span>＃算法會建立一個因子列表，包括數字2和所有奇數</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-gistfile1-txt-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC3"><span><span>＃直到“ a”的平方根，然後檢查這些數字中的任何一個是否除以“ a”</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-gistfile1-txt-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC4"><span><span>＃沒有餘數-如果是，則“ a”不是質數，否則為</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-gistfile1-txt-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC5"><span><span>如果sum（[如果a％factor == 0，則為True，否則（[2] + list（range（3，int（math.sqrt（a））+ 1,2）））中的因子為False]））：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-gistfile1-txt-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC6"><span><span>print（“數字是合成的”）</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-gistfile1-txt-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC7"><span><span>其他：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-gistfile1-txt-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-txt-LC8"><span><span>打印（“數字是素數”）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f/raw/d8d19ce0dd06a17f1db5c3140e641af6af2c35bb/gistfile1.txt"><span><span>查看原始</span></span></a><a href="https://gist.github.com/cescapa/c655e8e0c1558660150f#file-gistfile1-txt"><span><span>gistfile1.txt</span></span></a><span><span><span> </span>與❤主辦</span></span><a href="https://github.com/"><span><span>的GitHub</span></span></a></div>
</div>
</div>
<p><span><span>另一種解決方案是使用列表推導的簡潔的簡短解決方案。</span></span></p>
<div class="gist" id="gist26292207">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-ex11-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-ex11-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC1"><span class="pl-s1"><span><span>num<span> </span></span></span></span><span class="pl-c1"><span><span>=<span> </span></span></span></span><span class="pl-en"><span><span>int</span></span></span><span><span>（</span></span><span class="pl-en"><span><span>raw_input</span></span></span><span><span>（</span></span><span class="pl-s"><span><span>'插入數字：'</span></span></span><span><span>））</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-ex11-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC2"><span class="pl-s1"><span><span>a<span> </span></span></span></span><span class="pl-c1"><span><span>=</span></span></span><span><span><span> </span>[<span> </span></span></span><span class="pl-s1"><span><span>x</span></span></span><span> </span><span class="pl-k"><span><span>表示</span></span></span><span> </span><span class="pl-s1"><span><span>x</span></span></span><span> </span><span class="pl-c1"><span><span>在</span></span></span><span> </span><span class="pl-en"><span><span>範圍</span></span></span><span><span>（</span></span><span class="pl-c1"><span><span>2</span></span></span><span><span>，</span></span><span class="pl-s1"><span><span>num</span></span></span><span><span>）中，</span></span><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>num<span> </span></span></span></span><span class="pl-c1"><span><span>％</span></span></span><span> </span><span class="pl-s1"><span><span>x<span> </span></span></span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span><span> </span>]</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="3" id="file-ex11-py-L3"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC3"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="4" id="file-ex11-py-L4"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC4"><span class="pl-k"><span><span>def<span> </span></span></span></span><span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>n</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="5" id="file-ex11-py-L5"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC5"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-s1"><span><span>num<span> </span></span></span></span><span class="pl-c1"><span><span>&gt;<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="6" id="file-ex11-py-L6"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC6"><span class="pl-k"><span><span>如果</span></span></span><span> </span><span class="pl-en"><span><span>len</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>a</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>==<span> </span></span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="7" id="file-ex11-py-L7"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC7"><span class="pl-k"><span><span>打印</span></span></span><span> </span><span class="pl-s"><span><span>'prime'</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="8" id="file-ex11-py-L8"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC8"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="9" id="file-ex11-py-L9"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC9"><span class="pl-k"><span><span>打印</span></span></span><span> </span><span class="pl-s"><span><span>“不素”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="10" id="file-ex11-py-L10"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC10"><span class="pl-k"><span><span>其他</span></span></span><span><span>：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="11" id="file-ex11-py-L11"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC11"><span class="pl-k"><span><span>打印</span></span></span><span> </span><span class="pl-s"><span><span>“不素”</span></span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="12" id="file-ex11-py-L12"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC12"></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="13" id="file-ex11-py-L13"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-ex11-py-LC13"><span class="pl-en"><span><span>is_prime</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>num</span></span></span><span><span>）</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h3>P12</h3>
<p>List Ends Solutions</p>
<div><i></i></div>
<p><a href="https://www.practicepython.org/exercise/2014/04/25/12-list-ends.html">Exercise 12</a></p>
<p>Write a program that takes a list of numbers (for example,<span> </span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code>) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function.</p>
<p>Sample solution</p>
<div class="gist" id="gist11708295">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC1"><span class="pl-k">def</span><span> </span><span class="pl-en">list_ends</span>(<span class="pl-s1">a_list</span>):</td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC2"><span class="pl-k">return</span><span> </span>[<span class="pl-s1">a_list</span>[<span class="pl-c1">0</span>],<span> </span><span class="pl-s1">a_list</span>[<span class="pl-en">len</span>(<span class="pl-s1">a_list</span>)<span class="pl-c1">-</span><span class="pl-c1">1</span>]]</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="gist-meta"><a href="https://gist.github.com/anonymous/c3b1ff3420bc3bd68c4d/raw/d1322b914f164409dbeb2442d810dc073a63573a/gistfile1.py">view raw</a></div>
</div>
</div>
<div class="gist-meta"><a href="https://www.practicepython.org/exercise/2014/04/25/12-list-ends.html"><span>練習12</span></a>
<p><span><span>編寫一個程序，該程序接受一個數字列表（例如</span></span><code class="highlighter-rouge">a = [5, 10, 15, 20, 25]</code><span><span>），並製作一個僅包含給定列表的第一個和最後一個元素的新列表。</span><span>為了練習，請在函數內編寫此代碼。</span></span></p>
<span><span>樣品溶液</span></span>
<div class="gist" id="gist11708295">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-gistfile1-py">
<div class="Box-body p-0 blob-wrapper data type-python" itemprop="text">
<table class="highlight tab-size js-file-line-container" data-paste-markdown-skip="" data-tab-size="8">
<tbody>
<tr>
<td class="blob-num js-line-number" data-line-number="1" id="file-gistfile1-py-L1"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC1"><span class="pl-k"><span><span>def<span> </span></span></span></span><span class="pl-en"><span><span>list_ends</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>a_list</span></span></span><span><span>）：</span></span></td>
</tr>
<tr>
<td class="blob-num js-line-number" data-line-number="2" id="file-gistfile1-py-L2"></td>
<td class="blob-code blob-code-inner js-file-line" id="file-gistfile1-py-LC2"><span class="pl-k"><span><span>返回</span></span></span><span><span>[</span></span><span class="pl-s1"><span><span>的a_list</span></span></span><span><span><span> </span>[<span> </span></span></span><span class="pl-c1"><span><span>0</span></span></span><span><span><span> </span>]，</span></span><span class="pl-s1"><span><span>的a_list</span></span></span><span><span><span> </span>[<span> </span></span></span><span class="pl-en"><span><span>LEN</span></span></span><span><span>（</span></span><span class="pl-s1"><span><span>的a_list</span></span></span><span><span>）</span></span><span class="pl-c1"><span><span>-<span> </span></span></span></span><span class="pl-c1"><span><span>1</span></span></span><span><span><span> </span>]]</span></span></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="gist-meta">
<div class="gist" id="gist17590268">
<div class="gist-file">
<div class="gist-data">
<div class="js-gist-file-update-container js-task-list-container file-box">
<div class="file my-2" id="file-stringlists-py"></div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<h1>組員名單</h1>
<p>&gt;&gt;&gt;&gt;&gt;&gt;&gt; f177d903d2b01a4a7c5845d7f06bf87af5e92638</p>
<p>Repository:<span> </span><a href="https://github.com/40923105/cp2020">40923105</a><span> </span>| Site:<span> </span><a href="https://40923105.github.io/cp2020">40923105</a><br/>Repository:<span> </span><a href="https://github.com/40923109/cp2020">40923109</a><span> </span>| Site:<span> </span><a href="https://40923109.github.io/cp2020">40923109</a><br/>Repository:<span> </span><a href="https://github.com/40923110/cp2020">40923110</a><span> </span>| Site:<span> </span><a href="https://40923110.github.io/cp2020">40923110</a><br/>Repository:<span> </span><a href="https://github.com/40923111/cp2020">40923111</a><span> </span>| Site:<span> </span><a href="https://40923111.github.io/cp2020">40923111</a><br/>Repository:<span> </span><a href="https://github.com/40923122/cp2020">40923122</a><span> </span>| Site:<span> </span><a href="https://40923122.github.io/cp2020">40923122</a><br/>Repository:<span> </span><a href="https://github.com/40923130/cp2020">40923130</a><span> </span>| Site:<span> </span><a href="https://40923130.github.io/cp2020">40923130</a><br/>Repository:<span> </span><a href="https://github.com/40923134/cp2020">40923134</a><span> </span>| Site:<span> </span><a href="https://40923134.github.io/cp2020">40923134</a><br/>Repository:<span> </span><a href="https://github.com/40923135/cp2020">40923135</a><span> </span>| Site:<span> </span><a href="https://40923135.github.io/cp2020">40923135</a><span> </span>(組長)<br/>Repository:<span> </span><a href="https://github.com/40923139/cp2020">40923139</a><span> </span>| Site:<span> </span><a href="https://40923139.github.io/cp2020">40923139</a><br/>Repository:<span> </span><a href="https://github.com/40923143/cp2020">40923143</a><span> </span>| Site:<span> </span><a href="https://40923143.github.io/cp2020">40923143</a><br/>Repository:<span> </span><a href="https://github.com/40923153/cp2020">40923153</a><span> </span>| Site:<span> </span><a href="https://40923153.github.io/cp2020">40923153</a></p>
<p></p>
<p></p>